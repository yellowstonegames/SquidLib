/*
 * Copyright (C) 2002-2015 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package squidpony.squidmath;

import squidpony.annotation.GwtIncompatible;

import java.io.Serializable;
import java.util.*;

/**
 * An int-key and int-value insertion-ordered hash map with with a fast implementation, originally from fastutil as
 * Object2ObjectLinkedOpenHashMap but modified (in {@link OrderedMap}) to support constant-time indexed access of keys,
 * values, and entries, and reordering. Deletion is slower with this algorithm (O(n) because the array used to keep
 * track of ordering and indexing only allows linear-time deletion, instead of a linked-list approach allowing
 * constant-time deletion but not helping at all with indexed access), and insertion sometimes takes longer than an
 * ordered map using a linked-list for order because rehashing is more expensive. The benefits from constant-time access
 * by index are numerous, especially for games, since fetching a random element becomes O(1) instead of O(n), and the
 * index can be used to store extra info for no cost.
 * <br>
 * Instances of this class use a hash table to represent a map. The table is filled up to a specified <em>load factor</em>, and then doubled in size to accommodate new entries. If the table is
 * emptied below <em>one fourth</em> of the load factor, it is halved in size. However, halving is not performed when deleting entries from an iterator, as it would interfere with the iteration
 * process.
 * <br>
 * Note that {@link #clear()} does not modify the hash table size. Rather, a family of {@linkplain #trim() trimming methods} lets you control the size of the table; this is particularly useful if
 * you reuse instances of this class.
 * <br>
 * Iterators generated by this map will enumerate pairs in the same order in which they have been added to the map (addition of pairs whose key is already present in the set does not change the
 * iteration order). Note that this order has nothing in common with the natural order of the keys. The order is kept by means of a int-specialized list, {@link IntVLA}, and is modifiable with this
 * class' {@link #reorder(int...)} and {@link #shuffle(IRNG)} methods, among other tools. It may be preferable to avoid instantiating an Iterator object and instead
 * use a normal int-based for loop with {@link #getAt(int)} called in each iteration. Though this doesn't allow easy deletion of items during iteration, it may be the
 * fastest way to iterate through an OrderedMap.
 * <br>
 * This class allows approximately constant-time lookup of keys or values by their index in the ordering, which can
 * allow some novel usage of the data structure. {@link OrderedSet} can be used like a list of unique elements, keeping
 * order like a list does but also allowing rapid checks for whether an item exists in the OrderedSet, and OrderedMap
 * can be used like that but with values associated as well (where OrderedSet uses contains(), OrderedMap uses
 * containsKey()). You can also set the key and value at a position with {@link #putAt(int, int, int)}, or alter
 * the key while keeping its value and index the same with {@link #alter(int, int)}. Reordering works here too,
 * both with completely random orders from {@link #shuffle(IRNG)} or with a previously-generated ordering from
 * {@link #reorder(int...)} (you can produce such an ordering for a given size and reuse it across multiple Ordered data
 * structures with {@link IRNG#randomOrdering(int)}). Note that putAt() and {@link #removeAt(int)} do not run in constant
 * time, and depending on the point of insertion/removal, they are likely to run in linear time (but also note that most
 * insertion-ordered Maps and Sets don't allow insertion or removal at anywhere but the beginning or end of the order).
 * <br>
 * This doesn't allow custom IHashers because IHasher expects an Object to hash, and that would box the keys every time.
 * <br>
 * Thank you, Sebastiano Vigna, for making FastUtil available to the public with such high quality.
 * <br>
 * See https://github.com/vigna/fastutil for the original library.
 * @author Sebastiano Vigna (responsible for all the hard parts)
 * @author Tommy Ettinger (mostly responsible for squashing several layers of parent classes into one monster class)
 */
public class IntIntOrderedMap implements Serializable, Cloneable {
    private static final long serialVersionUID = 0L;
    /**
     * The array of keys.
     */
    protected int[] key;
    /**
     * The array of values.
     */
    protected int[] value;
    /**
     * The mask for wrapping a position counter.
     */
    protected int mask;
    /**
     * Whether this set contains the key zero.
     */
    protected boolean containsNullKey;
    /**
     * An IntVLA (variable-length int sequence) that stores the positions in the key array of specific keys, with the
     * positions in insertion order. The order can be changed with {@link #reorder(int...)} and other methods.
     */
    protected IntVLA order;
    /**
     * The current table size.
     */
    protected int n;
    /**
     * Threshold after which we rehash. It must be the table size times {@link #f}.
     */
    protected int maxFill;
    /**
     * Number of entries in the set (including the key zero, if present).
     */
    protected int size;
    /**
     * The acceptable load factor.
     */
    public final float f;
    /**
     * Cached set of entries.
     */
    protected volatile MapEntrySet entries;
    /**
     * Cached set of keys.
     */
    protected volatile KeySet keys;
    /**
     * Cached collection of values.
     */
    protected volatile ValueCollection values;
    /**
     * Default return value.
     */
    protected int defRetValue = -1;

    /**
     * The initial default size of a hash table.
     */
    public static final int DEFAULT_INITIAL_SIZE = 16;
    /**
     * The default load factor of a hash table.
     */
    public static final float DEFAULT_LOAD_FACTOR = .75f; // .1875f; // .75f;
    /**
     * The load factor for a (usually small) table that is meant to be particularly fast.
     */
    public static final float FAST_LOAD_FACTOR = .5f;
    /**
     * The load factor for a (usually very small) table that is meant to be extremely fast.
     */
    public static final float VERY_FAST_LOAD_FACTOR = .25f;

    public void defaultReturnValue(final int rv) {
        defRetValue = rv;
    }

    public int defaultReturnValue() {
        return defRetValue;
    }

    /**
     * Creates a new OrderedMap.
     * <p>
     * <p>The actual table size will be the least power of two greater than <code>expected</code>/<code>f</code>.
     *
     * @param expected the expected number of elements in the hash set.
     * @param f        the load factor.
     */

    @SuppressWarnings("unchecked")
    public IntIntOrderedMap(final int expected, final float f) {
        if (f <= 0 || f > 1)
            throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
        if (expected < 0) throw new IllegalArgumentException("The expected number of elements must be nonnegative");
        this.f = f;
        n = arraySize(expected, f);
        mask = n - 1;
        maxFill = maxFill(n, f);
        key = new int[n + 1];
        value = new int[n + 1];
        //link = new long[n + 1];
        order = new IntVLA(expected);
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor.
     *
     * @param expected the expected number of elements in the OrderedMap.
     */
    public IntIntOrderedMap(final int expected) {
        this(expected, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new OrderedMap with initial expected 16 entries and 0.75f as load factor.
     */
    public IntIntOrderedMap() {
        this(DEFAULT_INITIAL_SIZE, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new OrderedMap copying a given one.
     *
     * @param m a {@link Map} to be copied into the new OrderedMap.
     * @param f the load factor.
     */
    public IntIntOrderedMap(final IntIntOrderedMap m, final float f) {
        this(m.size(), f);
        putAll(m);
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor copying a given one.
     *
     * @param m a {@link Map} to be copied into the new OrderedMap.
     */
    public IntIntOrderedMap(final IntIntOrderedMap m) {
        this(m, m.f);
    }

    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public IntIntOrderedMap(final int[] keyArray, final int[] valueArray, final float f) {
        this(keyArray.length, f);
        if (keyArray.length != valueArray.length)
            throw new IllegalArgumentException("The key array and the value array have different lengths (" + keyArray.length + " and " + valueArray.length + ")");
        for (int i = 0; i < keyArray.length; i++)
            put(keyArray[i], valueArray[i]);
    }
    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyColl the collection of keys of the new OrderedMap.
     * @param valueColl the collection of corresponding values in the new OrderedMap.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public IntIntOrderedMap(final IntVLA keyColl, final IntVLA valueColl) {
        this(keyColl, valueColl, DEFAULT_LOAD_FACTOR);
    }
    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyColl the collection of keys of the new OrderedMap.
     * @param valueColl the collection of corresponding values in the new OrderedMap.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public IntIntOrderedMap(final IntVLA keyColl, final IntVLA valueColl, final float f) {
        this(keyColl.size, f);
        if (keyColl.size != valueColl.size)
            throw new IllegalArgumentException("The key array and the value array have different lengths (" + keyColl.size + " and " + valueColl.size + ")");
        final int len = keyColl.size;
        for (int i = 0; i < len; i++) {
            put(keyColl.get(i), valueColl.get(i));
        }
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public IntIntOrderedMap(final int[] keyArray, final int[] valueArray) {
        this(keyArray, valueArray, DEFAULT_LOAD_FACTOR);
    }
    private int realSize() {
        return containsNullKey ? size - 1 : size;
    }
    private void ensureCapacity(final int capacity) {
        final int needed = arraySize(capacity, f);
        if (needed > n)
            rehash(needed);
    }
    private void tryCapacity(final long capacity) {
        final int needed = (int) Math.min(
                1 << 30,
                Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(capacity
                        / f))));
        if (needed > n)
            rehash(needed);
    }
    private int removeEntry(final int pos) {
        final int oldValue = value[pos];
        size--;
        fixOrder(pos);
        shiftKeys(pos);
        if (size < (maxFill >> 2) && n > DEFAULT_INITIAL_SIZE)
            rehash(n >> 1);
        return oldValue;
    }
    private int removeNullEntry() {
        containsNullKey = false;
        final int oldValue = value[n];
        size--;
        fixOrder(n);
        if (size < (maxFill >> 2) && n > DEFAULT_INITIAL_SIZE)
            rehash(n >> 1);
        return oldValue;
    }

    /**
     * Puts the first key in keyArray with the first value in valueArray, then the second in each and so on.
     * The entries are all appended to the end of the iteration order, unless a key was already present. Then,
     * its value is changed at the existing position in the iteration order.
     * If the lengths of the two arrays are not equal, this puts a number of entries equal to the lesser length.
     * If either array is null, this returns without performing any changes.
     * @param keyArray an array of int keys that should usually have the same length as valueArray
     * @param valueArray an array of int values that should usually have the same length as keyArray
     */
    public void putAll(final int[] keyArray, final int[] valueArray)
    {
        if(keyArray == null || valueArray == null)
            return;
        for (int i = 0; i < keyArray.length && i < valueArray.length; i++)
            put(keyArray[i], valueArray[i]);

    }

    /**
     * Puts all key-value pairs in the Map m into this OrderedMap.
     * The entries are all appended to the end of the iteration order, unless a key was already present. Then,
     * its value is changed at the existing position in the iteration order. This can take any kind of Map,
     * including unordered HashMap objects; if the Map does not have stable ordering, the order in which entries
     * will be appended is not stable either. For this reason, OrderedMap, LinkedHashMap, and TreeMap (or other
     * SortedMap implementations) will work best when order matters.
     * @param m an IntIntOrderedMap to add into this
     */
    public void putAll(IntIntOrderedMap m) {
        if (f <= .5)
            ensureCapacity(m.size()); // The resulting map will be sized for m.size() elements
        else
            tryCapacity(size() + m.size()); // The resulting map will be size() +  m.size() elements
        int n = m.size();
        for (int i = 0; i < n; i++) {             
            put(m.keyAt(i), m.getAt(i));
        }
    }
    private int insert(final int k, final int v) {
        int pos;
        if (k == 0) {
            if (containsNullKey)
                return n;
            containsNullKey = true;
            pos = n;
        } else {
            int curr;
            final int[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (HashCommon.mix(k)) & mask]) != 0) {
                if (curr == k)
                    return pos;
                while ((curr = key[pos = (pos + 1) & mask]) != 0)
                    if (curr == k)
                        return pos;
            }
        }
        key[pos] = k;
        value[pos] = v;
        order.add(pos);
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return -1;
    }
    private int insertAt(final int k, final int v, final int idx) {
        int pos;
        if (k == 0) {
            if (containsNullKey)
            {
                fixOrder(n);
                order.insert(idx, n);
                return n;
            }
            containsNullKey = true;
            pos = n;
        } else {
            int curr;
            final int[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (HashCommon.mix(k)) & mask]) != 0) {
                if (curr == k)
                {
                    fixOrder(pos);
                    order.insert(idx, pos);
                    return pos;
                }
                while ((curr = key[pos = (pos + 1) & mask]) != 0)
                    if (curr == k)
                    {
                        fixOrder(pos);
                        order.insert(idx, pos);
                        return pos;
                    }
            }
        }
        key[pos] = k;
        value[pos] = v;
        order.insert(idx, pos);
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return -1;
    }
    public int put(final int k, final int v) {
        final int pos = insert(k, v);
        if (pos < 0)
            return defRetValue;
        final int oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    public int putAt(final int k, final int v, final int idx) {
        final int pos = insertAt(k, v, idx);
        if (pos < 0)
            return defRetValue;
        final int oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    /**
     * Shifts left entries with the specified hash code, starting at the
     * specified position, and empties the resulting free entry.
     *
     * @param pos
     *            a starting position.
     */
    protected final void shiftKeys(int pos) {
        // Shift entries with the same hash.
        int last, slot;
        int curr;
        final int[] key = this.key;
        for (;;) {
            pos = ((last = pos) + 1) & mask;
            for (;;) {
                if ((curr = key[pos]) == 0) {
                    key[last] = 0;
                    return;
                }
                slot = (HashCommon.mix(curr))
                        & mask;
                if (last <= pos ? last >= slot || slot > pos : last >= slot
                        && slot > pos)
                    break;
                pos = (pos + 1) & mask;
            }
            key[last] = curr;
            value[last] = value[pos];
            fixOrder(pos, last);
        }
    }
    @SuppressWarnings("unchecked")
    public int remove(final int k) {
        if (k == 0) {
            if (containsNullKey)
                return removeNullEntry();
            return defRetValue;
        }
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
            return defRetValue;
        if (k == curr)
            return removeEntry(pos);
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
                return defRetValue;
            if (k == curr)
                return removeEntry(pos);
        }
    }
    private int setValue(final int pos, final int v) {
        final int oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    /**
     * Removes the mapping associated with the first key in iteration order.
     *
     * @return the value previously associated with the first key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public int removeFirst() {
        return removeAt(0);
    }
    /**
     * Removes the mapping associated with the last key in iteration order.
     *
     * @return the value previously associated with the last key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public int removeLast() {
        return removeAt(size-1);
    }
    public int get(final int k) {
        if (k == 0)
            return containsNullKey ? value[n] : defRetValue;
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
            return defRetValue;
        if (k == curr)
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
                return defRetValue;
            if (k == curr)
                return value[pos];
        }
    }


    public int getOrDefault(final int k, final int defaultValue) {
        if (k == 0)
            return containsNullKey ? value[n] : defaultValue;
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
            return defaultValue;
        if (k == curr)
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
                return defaultValue;
            if (k == curr)
                return value[pos];
        }
    }

    protected int positionOf(final int k) {
        if (k == 0)
        {
            if(containsNullKey)
                return n;
            else
                return -1;
        }
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
            return -1;
        if (k == curr)
            return pos;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = pos + 1 & mask]) == 0)
                return -1;
            if (k == curr)
                return pos;
        }
    }

    /**
     * Gets the position in the ordering of the given key, though not as efficiently as some data structures can do it
     * (e.g. {@link Arrangement} can access ordering position very quickly but doesn't store other values on its own).
     * Returns a value that is at least 0 if it found k, or -1 if k was not present.
     * @param k a key or possible key that this should find the index of
     * @return the index of k, if present, or -1 if it is not present in this OrderedMap
     */
    public int indexOf(final int k)
    {
        int pos = positionOf(k);
        return (pos < 0) ? -1 : order.indexOf(pos);
    }

    /**
     * Swaps the positions in the ordering for the given items, if they are both present. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right was not
     * present, or because left and right are the same reference (so swapping would do nothing)).
     * @param left an item that should be present in this OrderedMap
     * @param right an item that should be present in this OrderedMap
     * @return true if this OrderedMap changed in ordering as a result of this call, or false otherwise
     */
    public boolean swap(final int left, final int right)
    {
        if(left == right) return false;
        int l = indexOf(left);
        if(l < 0) return false;
        int r = indexOf(right);
        if(r < 0) return false;
        order.swap(l, r);
        return true;
    }
    /**
     * Swaps the given indices in the ordering, if they are both valid int indices. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right referred to
     * an out-of-bounds index, or because left and right are equal (so swapping would do nothing)).
     * @param left an index of an item in this OrderedMap, at least 0 and less than {@link #size()}
     * @param right an index of an item in this OrderedMap, at least 0 and less than {@link #size()}
     * @return true if this OrderedMap changed in ordering as a result of this call, or false otherwise
     */
    public boolean swapIndices(final int left, final int right)
    {
        if(left < 0 || right < 0 || left >= order.size || right >= order.size || left == right) return false;
        order.swap(left, right);
        return true;
    }


    public boolean containsKey(final int k) {
        if (k == 0)
            return containsNullKey;
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
            return false;
        if (k == curr)
            return true;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
                return false;
            if (k == curr)
                return true;
        }
    }
    public boolean containsValue(final int v) {
        final int[] value = this.value;
        final int[] key = this.key;
        if (containsNullKey && value[n] == v)
            return true;
        for (int i = n; i-- != 0;)
            if (key[i] != 0 && value[i] == v)
                return true;
        return false;
    }
    /*
     * Removes all elements from this map.
     *
     * <P>To increase object reuse, this method does not change the table size.
     * If you want to reduce the table size, you must use {@link #trim()}.
     */
    public void clear() {
        if (size == 0)
            return;
        size = 0;
        containsNullKey = false;
        Arrays.fill(key, 0);
        order.clear();
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Looks up the key {@code k} in this map, remembers the associated value (which will be
     * {@link #defaultReturnValue()} if k wasn't found), adds {@code increment} to the actual associated value in the
     * map, and returns the remembered value.
     * @param k a key to look up
     * @param increment an int to add to the value associated with {@code k}
     * @return the previous value associated with k, or {@link #defaultReturnValue()} if k wasn't found
     */
    public int getAndIncrement(int k, int increment) {
        if (k == 0) {
            if (containsNullKey) {
                int got = value[n];
                value[n] += increment;
                return got;
            } else {
                value[n] = defRetValue + increment;
                return defRetValue;
            }
        }
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
        {
            put(k, defRetValue + increment);
            return defRetValue;
        }
        if (k == curr)
        {
            int got = value[pos];
            value[pos] += increment;
            return got;
        }
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
            {
                put(k, defRetValue + increment);
                return defRetValue;
            }
            if (k == curr)
            {
                int got = value[pos];
                value[pos] += increment;
                return got;
            }
        }
    }

    /**
     * The entry class for a OrderedMap does not record key and value, but rather the position in the hash table of the corresponding entry. This is necessary so that calls to
     * {@link MapEntry#setValue(int)} are reflected in the map
     */
    public final class MapEntry {
        // The table index this entry refers to, or -1 if this entry has been
        // deleted.
        int index;
        MapEntry(final int index) {
            this.index = index;
        }
        MapEntry() {
        }
        public int getKey() {
            return key[index];
        }
        public int getValue() {
            return value[index];
        }
        public int setValue(final int v) {
            final int oldValue = value[index];
            value[index] = v;
            return oldValue;
        }
        @SuppressWarnings("unchecked")
        public boolean equals(final Object o) {
            if (!(o instanceof MapEntry))
                return false;
            MapEntry e = (MapEntry) o;
            return (key[index] == e.getKey())
                    && (value[index] == e.getValue());
        }
        public int hashCode() {
            return HashCommon.mix(key[index])
                    ^ HashCommon.mix(HashCommon.mix(value[index]));
        }
        @Override
        public String toString() {
            return key[index] + "=>" + value[index];
        }
    }

    /**
     * Modifies the ordering so that the given entry is removed. This method will complete in logarithmic time.
     *
     * @param i the index of an entry.
     * @return the iteration-order index of the removed entry
     */
    protected int fixOrder(final int i) {
        if (size == 0) {
            order.clear();
            return -1;
        }
        return order.removeValue(i);
    }

    /**
     * Modifies the ordering for a shift from s to d.
     * <br>
     * This method will complete in logarithmic time or better.
     *
     * @param s the source position.
     * @param d the destination position.
     */
    protected void fixOrder(int s, int d) {
        if(size == 0)
            return;
        if (size == 1 || order.items[0] == s) {
            order.set(0, d);
        }
        else if (order.items[order.size-1] == s) {
            order.set(order.size - 1, d);
        }
        else
        {
            order.set(order.indexOf(s), d);
        }
    }

    /**
     * Returns the first key of this map in iteration order.
     *
     * @return the first key in iteration order.
     */
    public int firstKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[0]];
    }
    /**
     * Returns the last key of this map in iteration order.
     *
     * @return the last key in iteration order.
     */
    public int lastKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[order.size-1]];
    }
    /**
     * A list iterator over a OrderedMap.
     *
     * <P>
     * This class provides a list iterator over a OrderedMap. The
     * constructor runs in constant time.
     */
    private class MapIterator {
        /**
         * The entry that will be returned by the next call to
         * {@link ListIterator#previous()} (or <code>null</code> if no
         * previous entry exists).
         */
        int prev = -1;
        /**
         * The entry that will be returned by the next call to
         * {@link ListIterator#next()} (or <code>null</code> if no
         * next entry exists).
         */
        int next = -1;
        /**
         * The last entry that was returned (or -1 if we did not iterate or used
         * {@link Iterator#remove()}).
         */
        int curr = -1;
        /**
         * The current index (in the sense of a {@link ListIterator}).
         * Note that this value is not meaningful when this iterator has been
         * created using the nonempty constructor.
         */
        int index = 0;
        private MapIterator() {
            next = size == 0 ? -1 : order.items[0];
            index = 0;
        }
        /*
        private MapIterator(final K from) {
            if (((from) == null)) {
                if (containsNullKey) {
                    next = (int) link[n];
                    prev = n;
                    return;
                } else
                    throw new NoSuchElementException("The key null"
                            + " does not belong to this map.");
            }
            if (((key[last]) != null && (key[last]).equals(from))) {
                prev = last;
                index = size;
                return;
            }
            // The starting point.
            int pos = (((from).hashCode()))
                    & mask;
            // There's always an unused entry.
            while (!((key[pos]) == null)) {
                if (((key[pos]).equals(from))) {
                    // Note: no valid index known.
                    next = (int) link[pos];
                    prev = pos;
                    return;
                }
                pos = (pos + 1) & mask;
            }
            throw new NoSuchElementException("The key " + from
                    + " does not belong to this map.");
        }*/
        public boolean hasNext() {
            return next != -1;
        }
        public boolean hasPrevious() {
            return prev != -1;
        }
        private void ensureIndexKnown() {
            if (index >= 0)
                return;
            if (prev == -1) {
                index = 0;
                return;
            }
            if (next == -1) {
                index = size;
                return;
            }
            index = 0;
            /*while (pos != prev) {
                pos = (int) link[pos];
                index++;
            }*/
        }
        public int nextIndex() {
            ensureIndexKnown();
            return index + 1;
        }
        public int previousIndex() {
            ensureIndexKnown();
            return index - 1;
        }
        public int nextEntry() {
            if (!hasNext())
                throw new NoSuchElementException();
            curr = next;
            if(++index >= order.size)
                next = -1;
            else
                next = order.get(index);//(int) link[curr];
            prev = curr;
            return curr;
        }
        public int previousEntry() {
            if (!hasPrevious())
                throw new NoSuchElementException();
            curr = prev;
            if(--index < 1)
                prev = -1;
            else
                prev = order.get(index - 1);
            //prev = (int) (link[curr] >>> 32);
            next = curr;
            return curr;
        }
        public void remove() {
            ensureIndexKnown();
            if (curr == -1)
                throw new IllegalStateException();
            if (curr == prev) {
                /*
                 * If the last operation was a next(), we are removing an entry
                 * that precedes the current index, and thus we must decrement
                 * it.
                 */
                if(--index >= 1)
                    prev = order.get(index - 1); //(int) (link[curr] >>> 32);
                else
                    prev = -1;
            } else {
                if(index < order.size - 1)
                    next = order.get(index + 1);
                else
                    next = -1;
            }
            order.removeIndex(index);
            size--;
            int last, slot, pos = curr;
            curr = -1;
            if (pos == n) {
                containsNullKey = false;
            } else {
                int curr;
                final int[] key = IntIntOrderedMap.this.key;
                // We have to horribly duplicate the shiftKeys() code because we
                // need to update next/prev.
                for (;;) {
                    pos = ((last = pos) + 1) & mask;
                    for (;;) {
                        if ((curr = key[pos]) == 0) {
                            key[last] = 0;
                            return;
                        }
                        slot = (HashCommon.mix(curr)) & mask;
                        if (last <= pos
                                ? last >= slot || slot > pos
                                : last >= slot && slot > pos)
                            break;
                        pos = (pos + 1) & mask;
                    }
                    key[last] = curr;
                    value[last] = value[pos];
                    if (next == pos)
                        next = last;
                    if (prev == pos)
                        prev = last;
                    fixOrder(pos, last);
                }
            }
        }
        public int skip(final int n) {
            int i = n;
            while (i-- != 0 && hasNext())
                nextEntry();
            return n - i - 1;
        }
        public int back(final int n) {
            int i = n;
            while (i-- != 0 && hasPrevious())
                previousEntry();
            return n - i - 1;
        }
    }
    private class EntryIterator extends MapIterator
            implements
            Iterator<MapEntry>, Serializable {
        private static final long serialVersionUID = 0L;

        private MapEntry entry;
        public EntryIterator() {
        }
        public MapEntry next() {
            return entry = new MapEntry(nextEntry());
        }
        public MapEntry previous() {
            return entry = new MapEntry(previousEntry());
        }
        @Override
        public void remove() {
            super.remove();
            entry.index = -1; // You cannot use a deleted entry.
        }
    }

    public class FastEntryIterator extends MapIterator implements ListIterator<MapEntry>, Serializable {
        private static final long serialVersionUID = 0L;

        final MapEntry entry = new MapEntry();

        public FastEntryIterator() {
        }
        public MapEntry next() {
            entry.index = nextEntry();
            return entry;
        }
        public MapEntry previous() {
            entry.index = previousEntry();
            return entry;
        }
        public void set(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
        public void add(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
    }
    public final class MapEntrySet
            implements Cloneable, SortedSet<MapEntry>, Set<MapEntry>, Serializable {
        private static final long serialVersionUID = 0L;
        public EntryIterator iterator() {
            return new EntryIterator();
        }
        public Comparator<? super MapEntry> comparator() {
            return null;
        }
        public SortedSet<MapEntry> subSet(
                MapEntry fromElement,
                MapEntry toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<MapEntry> headSet(
                MapEntry toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<MapEntry> tailSet(
                MapEntry fromElement) {
            throw new UnsupportedOperationException();
        }
        public MapEntry first() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[0]);
        }
        public MapEntry last() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[order.size-1]);
        }
        @SuppressWarnings("unchecked")
        public boolean contains(final Object o) {
            if (!(o instanceof MapEntry))
                return false;
            final MapEntry e = (MapEntry) o;
            final int k = e.getKey();
            final int v = e.getValue();
            if (k == 0)
                return containsNullKey && (value[n] == v);
            int curr;
            final int[] key = IntIntOrderedMap.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
                return false;
            if (k == curr)
                return value[pos] == v;
            // There's always an unused entry.
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == 0)
                    return false;
                if (k == curr)
                    return value[pos] == v;
            }
        }
        @SuppressWarnings("unchecked")
        public boolean remove(final Object o) {
            if (!(o instanceof MapEntry))
                return false;
            final MapEntry e = (MapEntry) o;
            final int k = e.getKey();
            final int v = e.getValue();
            if (k == 0) {
                if (containsNullKey && value[n] == v) {
                    removeNullEntry();
                    return true;
                }
                return false;
            }
            int curr;
            final int[] key = IntIntOrderedMap.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (HashCommon.mix(k)) & mask]) == 0)
                return false;
            if (curr == k) {
                if (value[pos] == v) {
                    removeEntry(pos);
                    return true;
                }
                return false;
            }
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == 0)
                    return false;
                if (curr == k) {
                    if (value[pos] == v) {
                        removeEntry(pos);
                        return true;
                    }
                }
            }
        }
        public int size() {
            return size;
        }
        public void clear() {
            IntIntOrderedMap.this.clear();
        }

        public FastEntryIterator fastIterator() {
            return new FastEntryIterator();
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            return s.size() == size() && containsAll(s);
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        @SuppressWarnings("unchecked")
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Unsupported.
         *
         * @param c ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean addAll(Collection<? extends MapEntry> c) {
            throw new UnsupportedOperationException("addAll not supported");
        }

        /**
         * Unsupported.
         *
         * @param k ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean add(MapEntry k) {
            throw new UnsupportedOperationException("add not supported");
        }

        /**
         * Checks whether this collection contains all elements from the given
         * collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection contains all elements of the
         * argument.
         */
        public boolean containsAll(Collection<?> c) {
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (!contains(i.next()))
                    return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean retainAll(Collection<?> c) {
            boolean retVal = false;
            int n = size();
            final Iterator<?> i = iterator();
            while (n-- != 0) {
                if (!c.contains(i.next())) {
                    i.remove();
                    retVal = true;
                }
            }
            return retVal;
        }

        /**
         * Remove from this collection all elements in the given collection. If the
         * collection is an instance of this class, it uses faster iterators.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean removeAll(Collection<?> c) {
            boolean retVal = false;
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (remove(i.next()))
                    retVal = true;
            return retVal;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            final EntryIterator i = iterator();
            int n = size();
            MapEntry k;
            boolean first = true;
            s.append("{");
            while (n-- != 0) {
                if (first)
                    first = false;
                else
                    s.append(", ");
                k = i.next();                 
                s.append(key[k.index]).append("=>").append(value[k.index]);
            }
            s.append("}");
            return s.toString();
        }

    }

    public SortedSet<MapEntry> entrySet() {
        if (entries == null) entries = new MapEntrySet();
        return entries;
    }

    /**
     * An iterator on keys.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return keys
     * instead of entries.
     */
    public final class KeyIterator extends MapIterator implements Iterator<Integer>, Serializable {
        private static final long serialVersionUID = 0L;
        public Integer previous() {
            return key[previousEntry()];
        }        
        public int previousInt() {
            return key[previousEntry()];
        }
        public void set(Integer k) {
            throw new UnsupportedOperationException();
        }
        public void add(Integer k) {
            throw new UnsupportedOperationException();
        }
        public KeyIterator() {}
        public Integer next() {
            return key[nextEntry()];
        }
        public int nextInt() {
            return key[nextEntry()];
        }
        public void remove() { super.remove(); }
    }

    public final class KeySet implements SortedSet<Integer>, Serializable {
        private static final long serialVersionUID = 0L;

        public KeyIterator iterator() {
            return new KeyIterator();
        }

        public int size() {
            return size;
        }

        public void clear() {
            IntIntOrderedMap.this.clear();
        }

        public Integer first() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[0]];
        }

        public Integer last() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[order.size-1]];
        }

        public Comparator<Integer> comparator() {
            return null;
        }

        public final SortedSet<Integer> tailSet(Integer from) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<Integer> headSet(Integer to) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<Integer> subSet(Integer from, Integer to) {
            throw new UnsupportedOperationException();
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            unwrap(iterator(), a);
            return a;
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean remove(Object ok) {
            throw new UnsupportedOperationException("Cannot remove from the key set directly");
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean add(final Integer o) {
            throw new UnsupportedOperationException("Cannot add to the key set directly");
        }

        /**
         * Delegates to the corresponding type-specific method.
         */
        public boolean contains(final Object o) {
            return o instanceof Integer && containsKey((Integer) o);
        }

        /**
         * Checks whether this collection contains all elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection contains all elements of the argument.
         */
        public boolean containsAll(Collection<?> c) {
            final Iterator<?> i = c.iterator();
            int n = c.size();
            while (n-- != 0)
                if (!contains(i.next())) return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean retainAll(Collection<?> c) {
            boolean retVal = false;
            int n = size();
            final Iterator<?> i = iterator();
            while (n-- != 0) {
                if (!c.contains(i.next())) {
                    i.remove();
                    retVal = true;
                }
            }
            return retVal;
        }

        /**
         * Remove from this collection all elements in the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean removeAll(Collection<?> c) {
            boolean retVal = false;
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (remove(i.next())) retVal = true;
            return retVal;
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Adds all elements of the given collection to this collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean addAll(Collection<? extends Integer> c) {
            boolean retVal = false;
            final Iterator<? extends Integer> i = c.iterator();
            int n = c.size();
            while (n-- != 0)
                if (add(i.next())) retVal = true;
            return retVal;
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            if (s.size() != size())
                return false;
            return containsAll(s);
        }
        /**
         * Unwraps an iterator into an array starting at a given offset for a given number of elements.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
         * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
         *
         * @param i      a type-specific iterator.
         * @param array  an array to contain the output of the iterator.
         * @param offset the first element of the array to be returned.
         * @param max    the maximum number of elements to unwrap.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final int[] array, int offset, final int max) {
            if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
            if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
            int j = max;
            while (j-- != 0 && i.hasNext())
                array[offset++] = i.nextInt();
            return max - j - 1;
        }
        /**
         * Unwraps an iterator into an array.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
         * of the array has been reached.
         *
         * @param i     a type-specific iterator.
         * @param array an array to contain the output of the iterator.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final int[] array) {
            return unwrap(i, array, 0, array.length);
        }
        public int[] toIntArray() {
            int[] a = new int[size()];
            unwrap(iterator(), a);
            return a;
        }

        public int[] toIntArray(int[] a) {
            if (a == null || a.length < size()) a = new int[size()];
            unwrap(iterator(), a);
            return a;
        }

        /**
         * Unwraps an iterator into an array starting at a given offset for a given number of elements.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
         * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
         *
         * @param i      a type-specific iterator.
         * @param array  an array to contain the output of the iterator.
         * @param offset the first element of the array to be returned.
         * @param max    the maximum number of elements to unwrap.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array, int offset, final int max) {
            if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
            if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
            int j = max;
            while (j-- != 0 && i.hasNext())
                array[offset++] = i.next();
            return max - j - 1;
        }

        /**
         * Unwraps an iterator into an array.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
         * of the array has been reached.
         *
         * @param i     a type-specific iterator.
         * @param array an array to contain the output of the iterator.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array) {
            return unwrap(i, array, 0, array.length);
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            final KeyIterator i = iterator();
            int n = size();
            boolean first = true;
            s.append("{");
            while (n-- != 0) {
                if (first) first = false;
                else s.append(", ");
                s.append(i.next());
            }
            s.append("}");
            return s.toString();
        }
    }

    public KeySet keySet() {
        if (keys == null) keys = new KeySet();
        return keys;
    }

    public OrderedSet<Integer> keysAsOrderedSet()
    {
        OrderedSet<Integer> os = new OrderedSet<>(size, f);
        for (int i = 0; i < size; i++) {
            os.add(keyAt(i));
        }
        return os;
    }
    public int[] keysAsArray() {
        return keySet().toIntArray();
    }

    /**
     * An iterator on values.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return values
     * instead of entries.
     */
    public final class ValueIterator extends MapIterator implements ListIterator<Integer>, Serializable {
        private static final long serialVersionUID = 0L;

        public Integer previous() {
            return value[previousEntry()];
        }
        public void set(Integer v) {
            throw new UnsupportedOperationException();
        }
        public void add(Integer v) {
            throw new UnsupportedOperationException();
        }
        public ValueIterator() {}
        public Integer next() {
            return value[nextEntry()];
        }
        public void remove() { super.remove(); }
    }
    public final class ValueCollection extends AbstractCollection<Integer> implements Serializable
    {
        private static final long serialVersionUID = 0L;
        public ValueIterator iterator() {
            return new ValueIterator();
        }
        public int size() {
            return size;
        }
        public boolean contains(Object v) {
            return v instanceof Integer && containsValue((Integer)v);
        }
        public void clear() {
            IntIntOrderedMap.this.clear();
        }
    }
    public Collection<Integer> values() {
        if (values == null) values = new ValueCollection();
        return values;
    }

    public IntVLA valuesAsList()
    {
        IntVLA ls = new IntVLA(size);
        for (int i = 0; i < size; i++) {
            ls.add(getAt(i));
        }
        return ls;
    }

    /**
     * Rehashes the map, making the table as small as possible.
     * <p>
     * <P>This method rehashes the table to the smallest size satisfying the load factor. It can be used when the set will not be changed anymore, so to optimize access speed and size.
     * <p>
     * <P>If the table size is already the minimum possible, this method does nothing.
     *
     * @return true if there was enough memory to trim the map.
     * @see #trim(int)
     */
    public boolean trim() {
        final int l = arraySize(size, f);
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes this map if the table is too large.
     * <p>
     * <P>Let <var>N</var> be the smallest table size that can hold <code>max(n,{@link #size()})</code> entries, still satisfying the load factor. If the current table size is smaller than or equal to
     * <var>N</var>, this method does nothing. Otherwise, it rehashes this map in a table of size <var>N</var>.
     * <p>
     * <P>This method is useful when reusing maps. {@linkplain #clear() Clearing a map} leaves the table size untouched. If you are reusing a map many times, you can call this method with a typical
     * size to avoid keeping around a very large table just because of a few large transient maps.
     *
     * @param n the threshold for the trimming.
     * @return true if there was enough memory to trim the map.
     * @see #trim()
     */
    public boolean trim(final int n) {
        final int l = HashCommon.nextPowerOfTwo((int) Math.ceil(n / f));
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes the map.
     *
     * <P>
     * This method implements the basic rehashing strategy, and may be overriden
     * by subclasses implementing different rehashing strategies (e.g.,
     * disk-based rehashing). However, you should not override this method
     * unless you understand the internal workings of this class.
     *
     * @param newN
     *            the new size
     */

    @SuppressWarnings("unchecked")
    protected void rehash(final int newN) {
        final int[] key = this.key;
        final int[] value = this.value;
        final int mask = newN - 1; // Note that this is used by the hashing macro
        final int[] newKey = new int[newN + 1];
        final int[] newValue = new int[newN + 1];
        final int sz = order.size;
        int k;
        int i, pos;
        final int[] oi = order.items;
        for (int q = 0; q < sz; q++) {
            i = oi[q];
            if ((k = key[i]) == 0)
                pos = newN;
            else {
                pos = (HashCommon.mix(k)) & mask;
                while (newKey[pos] != 0)
                    pos = (pos + 1) & mask;
            }
            newKey[pos] = k;
            newValue[pos] = value[i];
            oi[q] = pos;
        }
        n = newN;
        this.mask = mask;
        maxFill = maxFill(n, f);
        this.key = newKey;
        this.value = newValue;
    }
    /*
    @SuppressWarnings("unchecked")
    protected void rehash(final int newN) {
        final K key[] = this.key;
        final V value[] = this.value;
        final int mask = newN - 1; // Note that this is used by the hashing
        // macro
        final K newKey[] = (K[]) new Object[newN + 1];
        final V newValue[] = (V[]) new Object[newN + 1];
        int i = first, prev = -1, newPrev = -1, t, pos;
        final long link[] = this.link;
        final long newLink[] = new long[newN + 1];
        first = -1;
        for (int j = size; j-- != 0;) {
            if (((key[i]) == null))
                pos = newN;
            else {
                pos = (((key[i]).hashCode())) & mask;
                while (!((newKey[pos]) == null))
                    pos = (pos + 1) & mask;
            }
            newKey[pos] = key[i];
            newValue[pos] = value[i];
            if (prev != -1) {
                newLink[newPrev] ^= ((newLink[newPrev] ^ (pos & 0xFFFFFFFFL)) & 0xFFFFFFFFL);
                newLink[pos] ^= ((newLink[pos] ^ ((newPrev & 0xFFFFFFFFL) << 32)) & 0xFFFFFFFF00000000L);
                newPrev = pos;
            } else {
                newPrev = first = pos;
                // Special case of SET(newLink[ pos ], -1, -1);
                newLink[pos] = -1L;
            }
            t = i;
            i = (int) link[i];
            prev = t;
        }
        this.link = newLink;
        this.last = newPrev;
        if (newPrev != -1)
            // Special case of SET_NEXT( newLink[ newPrev ], -1 );
            newLink[newPrev] |= -1 & 0xFFFFFFFFL;
        n = newN;
        this.mask = mask;
        maxFill = maxFill(n, f);
        this.key = newKey;
        this.value = newValue;
    }
    */
    /**
     * Returns a deep copy of this map.
     *
     * <P>
     * This method performs a deep copy of this OrderedMap; the data stored in the
     * map, however, is not cloned. Note that this makes a difference only for
     * object keys.
     *
     * @return a deep copy of this map.
     */
    @SuppressWarnings("unchecked")
    @GwtIncompatible
    public IntIntOrderedMap clone() {
        IntIntOrderedMap c;
        try {
            c = (IntIntOrderedMap) super.clone();
            c.key = new int[n + 1];
            System.arraycopy(key, 0, c.key, 0, n + 1);
            c.value = new int[n + 1];
            System.arraycopy(value, 0, c.value, 0, n + 1);
            c.order = (IntVLA) order.clone();
            return c;
        } catch (Exception cantHappen) {
            throw new UnsupportedOperationException(cantHappen + (cantHappen.getMessage() != null ?
                    "; " + cantHappen.getMessage() : ""));
        }
    }
    /**
     * Returns a hash code for this map.
     *
     * @return a hash code for this map.
     */
    public int hashCode() {
        int h = 0;
        for (int j = realSize(), i = 0, t = 0; j-- != 0;) {
            while (key[i] == 0)
                i++;             
            t = HashCommon.mix(key[i]) ^ HashCommon.mix(value[i] ^ HashCommon.INV_INT_PHI);
            h += t;
            i++;
        }
        // Zero / null keys have hash zero.
        if (containsNullKey)
            h += HashCommon.mix(value[n] ^ HashCommon.INV_INT_PHI);
        return h;
    }

    public long hash64()
    {
        return 31L * (31L * CrossHash.hash64(key) + CrossHash.hash64(value)) + size;
    }
    /**
     * Returns the maximum number of entries that can be filled before rehashing.
     *
     * @param n the size of the backing array.
     * @param f the load factor.
     * @return the maximum number of entries before rehashing.
     */
    public static int maxFill(final int n, final float f) {
        /* We must guarantee that there is always at least
         * one free entry (even with pathological load factors). */
        return Math.min((int)(n * f + 0.99999994f), n - 1);
    }

    /**
     * Returns the least power of two smaller than or equal to 2<sup>30</sup> and larger than or equal to <code>Math.ceil( expected / f )</code>.
     *
     * @param expected the expected number of elements in a hash table.
     * @param f        the load factor.
     * @return the minimum possible size for a backing array.
     * @throws IllegalArgumentException if the necessary size is larger than 2<sup>30</sup>.
     */
    public static int arraySize(final int expected, final float f) {
        final long s = Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(expected / f)));
        if (s > (1 << 30))
            throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor " + f + ")");
        return (int) s;
    }

    /**
     * Unwraps an iterator into an array starting at a given offset for a given number of elements.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i      a type-specific iterator.
     * @param array  an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max    the maximum number of elements to unwrap.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array, int offset, final int max) {
        if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
        if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
        int j = max;
        while (j-- != 0 && i.hasNext())
            array[offset++] = i.next();
        return max - j - 1;
    }

    /**
     * Unwraps an iterator into an array.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i     a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array) {
        return unwrap(i, array, 0, array.length);
    }


    /** Unwraps an iterator into an array starting at a given offset for a given number of elements.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max the maximum number of elements to unwrap.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array, int offset, final int max ) {
        if ( max < 0 ) throw new IllegalArgumentException( "The maximum number of elements (" + max + ") is negative" );
        if ( offset < 0 || offset + max > array.length ) throw new IllegalArgumentException();
        int j = max;
        while ( j-- != 0 && i.hasNext() )
            array[ offset++ ] = i.next();
        return max - j - 1;
    }

    /** Unwraps an iterator into an array.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array) {
        return objectUnwrap(i, array, 0, array.length );
    }

    @Override
    public String toString() {
        final StringBuilder s = new StringBuilder();
        int n = size(), i = 0;
        boolean first = true;
        s.append("IntIntOrderedMap{");
        while (i < n) {
            if (first) first = false;
            else s.append(", ");
            s.append(entryAt(i++));
        }
        s.append("}");
        return s.toString();
    }
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof IntIntOrderedMap))
            return false;
        IntIntOrderedMap m = (IntIntOrderedMap) o;
        if (m.size() != size())
            return false;
        return entrySet().containsAll(m.entrySet());
    }

    @GwtIncompatible
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
        final int[] key = this.key;
        final int[] value = this.value;
        final MapIterator i = new MapIterator();
        s.defaultWriteObject();
        for (int j = size, e; j-- != 0;) {
            e = i.nextEntry();
            s.writeInt(key[e]);
            s.writeInt(value[e]);
        }
    }
    @GwtIncompatible
    @SuppressWarnings("unchecked")
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
        n = arraySize(size, f);
        maxFill = maxFill(n, f);
        mask = n - 1;
        final int[] key = this.key = new int[n + 1];
        final int[] value = this.value = new int[n + 1];
        final IntVLA order = this.order = new IntVLA(n + 1);
        int k;
        int v;
        for (int i = size, pos; i-- != 0;) {
            k = s.readInt();
            v = s.readInt();
            if (k == 0) {
                pos = n;
                containsNullKey = true;
            } else {
                pos = (HashCommon.mix(k))
                        & mask;
                while (!(key[pos] == 0))
                    pos = (pos + 1) & mask;
            }

            key[pos] = k;
            value[pos] = v;
            order.add(pos);
        }
    }

    /**
     * Gets the value at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the value to fetch
     * @return the value at the index, if the index is valid, otherwise the default return value
     */
    public int getAt(final int idx) {
        int pos;
        if (idx < 0 || idx >= order.size)
            return defRetValue;
        // The starting point.
        if (key[pos = order.get(idx)] == 0)
            return containsNullKey ? value[n] : defRetValue;
        return value[pos];
    }
    /**
     * Gets the key at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the key to fetch
     * @return the key at the index, if the index is valid, otherwise 0
     */
    public int keyAt(final int idx) {
        if (idx < 0 || idx >= order.size)
            return 0;
        // The starting point.
        return key[order.get(idx)];
    }

    /**
     * Gets the key-value Map.Entry at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the entry to fetch
     * @return the key-value entry at the index, if the index is valid, otherwise null
     */
    public MapEntry entryAt(final int idx)
    {
        if (idx < 0 || idx >= order.size)
            return null;
        return new MapEntry(order.get(idx));
    }

    /**
     * Removes the key and value at the given index in the iteration order in not-exactly constant time (though it still
     * should be efficient).
     * @param idx the index in the iteration order of the key and value to remove
     * @return the value removed, if there was anything removed, or the default return value otherwise (often null)
     */
    public int removeAt(final int idx) {

        if (idx < 0 || idx >= order.size)
            return defRetValue;
        int pos = order.get(idx);
        if (key[pos] == 0) {
            if (containsNullKey)
                return removeNullEntry();
            return defRetValue;
        }
        return removeEntry(pos);
    }
    /**
     * Gets a random value from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a value
     * @return a random value from this OrderedMap
     */
    public int randomValue(IRNG rng)
    {
        return getAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random key from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a key
     * @return a random key from this OrderedMap
     */
    public int randomKey(IRNG rng)
    {
        return keyAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random entry from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a entry
     * @return a random key-value entry from this OrderedMap
     */
    public MapEntry randomEntry(IRNG rng)
    {
        return new MapEntry(order.getRandomElement(rng));
    }

    /**
     * Randomly alters the iteration order for this OrderedMap using the given IRNG to shuffle.
     * @param rng used to generate a random ordering
     * @return this for chaining
     */
    public IntIntOrderedMap shuffle(IRNG rng)
    {
        if(size < 2)
            return this;
        order.shuffle(rng);
        return this;
    }

    /**
     * Given an array or varargs of replacement indices for this OrderedMap's iteration order, reorders this so the
     * first item in the returned version is the same as {@code getAt(ordering[0])} (with some care taken for negative
     * or too-large indices), the second item in the returned version is the same as {@code getAt(ordering[1])}, etc.
     * <br>
     * Negative indices are considered reversed distances from the end of ordering, so -1 refers to the same index as
     * {@code ordering[ordering.length - 1]}. If ordering is smaller than {@code size()}, only the indices up to the
     * length of ordering will be modified. If ordering is larger than {@code size()}, only as many indices will be
     * affected as {@code size()}, and reversed distances are measured from the end of this Map's entries instead of
     * the end of ordering. Duplicate values in ordering will produce duplicate values in the returned Map.
     * <br>
     * This method modifies this OrderedMap in-place and also returns it for chaining.
     * @param ordering an array or varargs of int indices, where the nth item in ordering changes the nth item in this
     *                 Map to have the value currently in this Map at the index specified by the value in ordering
     * @return this for chaining, after modifying it in-place
     */
    public IntIntOrderedMap reorder(int... ordering)
    {
        order.reorder(ordering);
        return this;
    }
    private int alterEntry(final int pos) {
        int idx = fixOrder(pos);
        size--;
        shiftKeys(pos);
        return idx;
    }
    private int alterNullEntry() {
        int idx = fixOrder(n);
        containsNullKey = false;
        size--;
        return idx;
    }
    /**
     * Swaps a key, original, for another key, replacement, while keeping replacement at the same point in the iteration
     * order as original and keeping it associated with the same value (which also keeps its iteration index). Unlike
     * the similar method {@link #alter(int, int)}, this will not change this OrderedMap if replacement is already
     * present. To contrast, alter() can reduce the size of the OrderedMap if both original and replacement are already
     * in the Map. If replacement is found, this returns the default return value, otherwise it switches out original
     * for replacement and returns whatever was associated with original.
     * @param original the key to find and swap out
     * @param replacement the key to replace original with
     * @return the value associated with original before, and replacement now
     */
    public int alterCarefully(final int original, final int replacement) {
        if(!containsKey(replacement))
            return alter(original, replacement);
        else
            return defRetValue;
    }
    /**
     * Swaps a key, original, for another key, replacement, while keeping replacement at the same point in the iteration
     * order as original and keeping it associated with the same value (which also keeps its iteration index).
     * Be aware that if both original and replacement are present in the OrderedMap, this will still replace original
     * with replacement but will also remove the other occurrence of replacement to avoid duplicate keys. This can throw
     * off the expected order because the duplicate could be at any point in the ordering when it is removed. You may
     * want to prefer {@link #alterCarefully(int, int)} if you don't feel like checking by hand for whether
     * replacement is already present, but using this method is perfectly reasonable if you know overlaps won't happen.
     * @param original the key to find and swap out
     * @param replacement the key to replace original with
     * @return the value associated with original before, and replacement now
     */
    public int alter(final int original, final int replacement) {
        int v;
        int idx;
        if (original == 0) {
            if (containsNullKey) {
                v = value[n];
                idx = alterNullEntry();
                putAt(replacement, v, idx);
                return v;
            }
            else
                v = defRetValue;
            return v;
        }
        int curr;
        final int[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (HashCommon.mix(original)) & mask]) == 0)
            return defRetValue;
        if (original == curr)
        {
            v = value[pos];
            idx = alterEntry(pos);
            putAt(replacement, v, idx);
            return v;
        }
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == 0)
                return defRetValue;
            if (original == curr)
            {
                v = value[pos];
                idx = alterEntry(pos);
                putAt(replacement, v, idx);
                return v;
            }
        }
    }

    public IntVLA getMany(int... keys)
    {
        if(keys == null)
            return new IntVLA(1);
        final int len = keys.length;
        IntVLA vals = new IntVLA(len);
        for (int i = 0; i < len; i++) {
            vals.add(get(keys[i]));
        }
        return vals;
    }
    /**
     * Changes the int at the given index to replacement while keeping replacement at the same point in the ordering.
     * Be aware that if replacement is present in the OrderedMap, this will still replace the given index
     * with replacement but will also remove the other occurrence of replacement to avoid duplicate keys. This can throw
     * off the expected order because the duplicate could be at any point in the ordering when it is removed. You may
     * want to prefer {@link #alterAtCarefully(int, int)} if you don't feel like checking by hand for whether
     * replacement is already present, but using this method is perfectly reasonable if you know overlaps won't happen.
     * @param index       an index to replace the int key at
     * @param replacement another int key that will replace the original at the remembered index
     * @return the value associated with the possibly-altered key
     */
    public int alterAt(int index, int replacement)
    {
        return alter(keyAt(index), replacement);
    }
    /**
     * Changes the int at the given index to replacement while keeping replacement at the same point in the ordering.
     * Unlike the similar method {@link #alterAt(int, int)}, this will not change this OrderedMap if replacement is
     * already present. To contrast, alterAt() can reduce the size of the OrderedMap if replacement is already
     * in the Map. If replacement is found, this returns the default return value, otherwise it switches out the index
     * for replacement and returns whatever value was at the index before.
     * @param index       an index to replace the int key at
     * @param replacement another int key that will replace the original at the remembered index
     * @return the value associated with the key at the altered index before, and replacement now
     */
    public int alterAtCarefully(int index, int replacement)
    {
        return alterCarefully(keyAt(index), replacement);
    }

    /**
     * If the specified key is not already associated with a value, associates it with the given value
     * and returns that value, else returns the current value without changing anything.
     *
     * @param key   key with which the specified value is to be associated
     * @param value value to be associated with the specified key
     * @return the previous value associated with the specified key, or
     * {@code value} if there was no mapping for the key.
     */
    public int putIfAbsent(int key, int value) {
        if(containsKey(key))
            return get(key);         
        put(key, value);
        return value;
    }

    /**
     * Removes the entry for the specified key only if it is currently
     * mapped to the specified value.
     *
     * @param key   key with which the specified value is associated
     * @param value value expected to be associated with the specified key
     * @return {@code true} if the value was removed
     */
    public boolean remove(int key, int value) {
        if (containsKey(key) && get(key) == value) {
            remove(key);
            return true;
        } else
            return false;
    }

    /**
     * Replaces the entry for the specified key only if currently
     * mapped to the specified value. The position in the iteration
     * order is retained.
     *
     * @param key      key with which the specified value is associated
     * @param oldValue value expected to be associated with the specified key
     * @param newValue value to be associated with the specified key
     * @return {@code true} if the value was replaced
     */
    public boolean replace(int key, int oldValue, int newValue) {
        if (containsKey(key) && get(key) == oldValue) {
            put(key, newValue);
            return true;
        } else
            return false;
    }

    /**
     * Replaces the entry for the specified key only if it is
     * currently mapped to some value. Preserves the existing key's
     * position in the iteration order.
     *
     * @param key   key with which the specified value is associated
     * @param value value to be associated with the specified key
     * @return the previous value associated with the specified key, or
     * {@code null} if there was no mapping for the key.
     * (A {@code null} return can also indicate that the map
     * previously associated {@code null} with the key.)
     */
    public int replace(int key, int value) {
        if (containsKey(key)) {
            return put(key, value);
        } else
            return defRetValue;
    }
    /**
     * Given alternating key and value arguments in pairs, puts each key-value pair into this OrderedMap as if by
     * calling {@link #put(int, int)} repeatedly for each pair. This mimics the parameter syntax used for
     * {@link #makeMap(int, int, int...)}, and can be used to retain that style of insertion after an
     * IntIntOrderedMap has been instantiated.
     * @param k0 the first key to add
     * @param v0 the first value to add
     * @param rest an array or vararg of keys and values in pairs; should contain alternating only int elements
     * @return this, after adding all viable key-value pairs given
     */
    @SuppressWarnings("unchecked")
    public IntIntOrderedMap putPairs(int k0, int v0, int... rest)
    {
        if(rest == null || rest.length == 0)
        {
            put(k0, v0);
            return this;
        }
        put(k0, v0);

        for (int i = 0; i < rest.length - 1; i+=2) {
            put(rest[i], rest[i + 1]);
        }
        return this;
    }

    /**
     * Makes an IntIntOrderedMap using the given int keys and values in alternating key-value-key-value order. If rest
     * has an odd-number length, then it discards the last item. If any item in rest is not an int, this will not
     * compile. This is similar to the makeOM method in the Maker class, but produces an IntIntOrderedMap.
     * <br>
     * This is named makeMap to indicate that it expects key and value parameters, unlike a Set or List. This convention
     * may be extended to other data structures that also have static methods for instantiation.
     * @param k0 the first key; used to infer the types of other keys if generic parameters aren't specified.
     * @param v0 the first value; used to infer the types of other values if generic parameters aren't specified.
     * @param rest an array or vararg of keys and values in pairs; should contain only int elements
     * @return a freshly-made IntIntOrderedMap, using k0, v0, and the contents of rest to fill it
     */
    @SuppressWarnings("unchecked")
    public static IntIntOrderedMap makeMap(int k0, int v0, int... rest)
    {
        if(rest == null || rest.length == 0)
        {
            IntIntOrderedMap om = new IntIntOrderedMap(2);
            om.put(k0, v0);
            return om;
        }
        IntIntOrderedMap om = new IntIntOrderedMap(1 + (rest.length >> 1));
        om.put(k0, v0);

        for (int i = 0; i < rest.length - 1; i+=2) {
            try {
                om.put(rest[i], rest[i + 1]);
            }catch (ClassCastException ignored) {
            }
        }
        return om;
    }

    /**
     * Makes an empty IntIntOrderedMap.This method is provided for completeness relative to makeMap() with 2 or more 
     * parameters.
     * @return an empty IntIntOrderedMap
     */
    public static IntIntOrderedMap makeMap()
    {
        return new IntIntOrderedMap();
    }
}
