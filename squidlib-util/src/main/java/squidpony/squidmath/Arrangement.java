/*
 * Copyright (C) 2002-2015 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. 
 */
package squidpony.squidmath;

import squidpony.ArrayTools;
import squidpony.annotation.Beta;
import squidpony.annotation.GwtIncompatible;

import java.io.Serializable;
import java.util.*;

/**
 * A bi-directional mapping of objects to positions in an ordering (which this generates), and vice versa.
 * Useful for various indirection techniques where you want to be able to retrieve a value in several ways, such as with
 * multiple Arrangements all sharing the same ordering but with different types for keys.
 * <br>
 * Originally, this started as a generic linked hash map with with a fast implementation, originally from fastutil as
 * Object2IntLinkedOpenHashMap but modified to support indexed access. The code is extremely close to {@link OrderedMap},
 * and like OrderedMap you can look up keys by index, but this is specialized to int values which it can automatically assign.
 * <br>
 * <p>Instances of this class use a hash table to represent a map. The table is filled up to a specified <em>load factor</em>, and then doubled in size to accommodate new entries. If the table is
 * emptied below <em>one fourth</em> of the load factor, it is halved in size. However, halving is not performed when deleting entries from an iterator, as it would interfere with the iteration
 * process.
 * </p>
 * <p>Note that {@link #clear()} does not modify the hash table size. Rather, a family of {@linkplain #trim() trimming methods} lets you control the size of the table; this is particularly useful if
 * you reuse instances of this class.
 * </p>
 * <p>Iterators generated by this map will enumerate pairs in the same order in which they have been added to the map (addition of pairs whose key is already present in the set does not change the
 * iteration order). Note that this order has nothing in common with the natural order of the keys. The order is kept by means of a int-specialized list, {@link IntVLA}, and is modifiable with this
 * class' {@link #reorder(int...)} and {@link #shuffle(IRNG)} methods, among other tools.
 * </p>
 * <p>This class implements the interface of a sorted map, so to allow easy access of the iteration order: for instance, you can get the first key in iteration order with {@code firstKey()} without
 * having to create an iterator; however, this class partially violates the {@link SortedMap} contract because all submap methods throw an exception and {@link #comparator()} returns always
 * <code>null</code>.
 * </p>
 * <p>
 * Additional methods, such as <code>getAndMoveToFirst()</code>, make it easy to use instances of this class as a cache (e.g., with LRU policy).
 * </p>
 * <br>
 * Thank you, Sebastiano Vigna, for making FastUtil available to the public with such high quality.
 * <br>
 * See https://github.com/vigna/fastutil for the original library.
 *
 * @author Sebastiano Vigna (responsible for all the hard parts)
 * @author Tommy Ettinger (mostly responsible for squashing several layers of parent classes into one monster class)
 */
@Beta
public class Arrangement<K> implements SortedMap<K, Integer>, Iterable<K>, Serializable, Cloneable {
    private static final long serialVersionUID = 0L;
    /**
     * The array of keys.
     */
    protected K[] key;
    /**
     * The array of values.
     */
    protected int[] value;
    /**
     * The mask for wrapping a position counter.
     */
    protected int mask;
    /**
     * Whether this set contains the key zero.
     */
    protected boolean containsNullKey;

    /**
     * The ordering of entries, with the nth entry in order being the index into {@link #key} and {@link #value} to find
     * that entry's key and value. The ints in order are always less than or equal to n, and greater than or equal to 0.
     */
    protected IntVLA order;
    /**
     * The current table size.
     */
    protected int n;
    /**
     * Threshold after which we rehash. It must be the table size times {@link #f}.
     */
    protected int maxFill;
    /**
     * Number of entries in the set (including the key zero, if present).
     */
    protected int size;
    /**
     * The acceptable load factor.
     */
    public final float f;
    /**
     * Cached set of entries.
     */
    protected volatile MapEntrySet entries;
    /**
     * Cached set of keys.
     */
    protected volatile KeySet keys;
    /**
     * Cached collection of values.
     */
    protected volatile Collection<Integer> values;
    /**
     * Default return value.
     */
    protected final int defRetValue = -1;

    /**
     * The initial default size of a hash table.
     */
    public static final int DEFAULT_INITIAL_SIZE = 16;
    /**
     * The default load factor of a hash table.
     */
    public static final float DEFAULT_LOAD_FACTOR = .5f; // .375f // .1875f; // .75f;
    /**
     * The load factor for a (usually small) table that is meant to be particularly fast.
     */
    public static final float FAST_LOAD_FACTOR = .5f;
    /**
     * The load factor for a (usually very small) table that is meant to be extremely fast.
     */
    public static final float VERY_FAST_LOAD_FACTOR = .25f;

    protected CrossHash.IHasher hasher = null;

    /**
     * Creates a new Arrangement.
     * <p>
     * <p>The actual table size will be the least power of two greater than <code>expected</code>/<code>f</code>.
     *
     * @param expected the expected number of elements in the hash set.
     * @param f        the load factor.
     */

    @SuppressWarnings("unchecked")
    public Arrangement(final int expected, final float f) {
        if (f <= 0 || f > 1)
            throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
        if (expected < 0) throw new IllegalArgumentException("The expected number of elements must be nonnegative");
        this.f = f;
        n = arraySize(expected, f);
        mask = n - 1;
        maxFill = maxFill(n, f);
        key = (K[]) new Object[n + 1];
        value = new int[n + 1];
        //link = new long[n + 1];
        order = new IntVLA(expected);
        hasher = CrossHash.defaultHasher;
    }

    /**
     * Creates a new Arrangement with 0.5f as load factor.
     *
     * @param expected the expected number of elements in the Arrangement.
     */
    public Arrangement(final int expected) {
        this(expected, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new Arrangement with initial expected 16 entries and 0.5f as load factor.
     */
    public Arrangement() {
        this(DEFAULT_INITIAL_SIZE, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new Arrangement copying a given one.
     *
     * @param m a {@link Map} to be copied into the new Arrangement.
     * @param f the load factor.
     */
    public Arrangement(final Map<? extends K, ? extends Integer> m, final float f) {
        this(m.size(), f, (m instanceof Arrangement) ? ((Arrangement) m).hasher : CrossHash.defaultHasher);
        putAll(m);
    }

    /**
     * Creates a new Arrangement with 0.5f as load factor copying a given one.
     *
     * @param m a {@link Map} to be copied into the new Arrangement.
     */
    public Arrangement(final Map<? extends K, ? extends Integer> m) {
        this(m, (m instanceof Arrangement) ? ((Arrangement) m).f : DEFAULT_LOAD_FACTOR, (m instanceof Arrangement) ? ((Arrangement) m).hasher : CrossHash.defaultHasher);
    }

    public Arrangement(final Arrangement<? extends K> a) {
        this(a.size(), a.f, a.hasher);
        ensureCapacity(a.size()); // The resulting map will be sized for
        System.arraycopy(a.key, 0, key, 0, a.key.length);
        System.arraycopy(a.value, 0, value, 0, a.value.length);
        order.addAll(a.order);
        containsNullKey = a.containsNullKey;
    }

    /**
     * Creates a new Arrangement using the elements of an array.
     *
     * @param keyArray the array of keys of the new Arrangement.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final K[] keyArray, final float f) {
        this(keyArray.length, f);
        for (int i = 0; i < keyArray.length; i++)
            put(keyArray[i], i);
    }

    /**
     * Creates a new Arrangement using the elements of an array.
     *
     * @param keyColl the collection of keys of the new Arrangement.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final Collection<K> keyColl) {
        this(keyColl, DEFAULT_LOAD_FACTOR);
    }
    /**
     * Creates a new Arrangement using the given collection of keys.
     *
     * @param keyColl the collection of keys of the new Arrangement.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final Collection<K> keyColl, final float f) {
        this(keyColl.size(), f);
        Iterator<K> ki = keyColl.iterator();
        int idx = 0;
        while (ki.hasNext())
        {
            put(ki.next(), idx++);
        }
    }

    /**
     * Creates a new Arrangement with 0.5f as load factor using the elements of an array.
     *
     * @param keyArray the array of keys of the new Arrangement.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final K[] keyArray) {
        this(keyArray, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new Arrangement.
     * <p>
     * <p>The actual table size will be the least power of two greater than <code>expected</code>/<code>f</code>.
     *
     * @param expected the expected number of elements in the hash set.
     * @param f        the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    @SuppressWarnings("unchecked")
    public Arrangement(final int expected, final float f, CrossHash.IHasher hasher) {
        if (f <= 0 || f > 1)
            throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
        if (expected < 0) throw new IllegalArgumentException("The expected number of elements must be nonnegative");
        this.f = f;
        n = arraySize(expected, f);
        mask = n - 1;
        maxFill = maxFill(n, f);
        key = (K[]) new Object[n + 1];
        value = new int[n + 1];
        //link = new long[n + 1];
        order = new IntVLA(expected);
        this.hasher = (hasher == null) ? CrossHash.defaultHasher : hasher;
    }
    /**
     * Creates a new Arrangement with 0.5f as load factor.
     *
     * @param expected the expected number of elements in the Arrangement.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public Arrangement(final int expected, CrossHash.IHasher hasher) {
        this(expected, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new Arrangement with initial expected 16 entries and 0.5f as load factor.
     */
    public Arrangement(CrossHash.IHasher hasher) {
        this(DEFAULT_INITIAL_SIZE, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new Arrangement copying a given one.
     *
     * @param m a {@link Map} to be copied into the new Arrangement.
     * @param f the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public Arrangement(final Map<? extends K, ? extends Integer> m, final float f, CrossHash.IHasher hasher) {
        this(m.size(), f, hasher);
        putAll(m);
    }

    /**
     * Creates a new Arrangement with 0.5f as load factor copying a given one.
     * @param m a {@link Map} to be copied into the new Arrangement.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public Arrangement(final Map<? extends K, ? extends Integer> m, CrossHash.IHasher hasher) {
        this(m, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new Arrangement using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new Arrangement.
     * @param f the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final K[] keyArray, final float f, CrossHash.IHasher hasher) {
        this(keyArray.length, f, hasher);

        for (int i = 0; i < keyArray.length; i++)
            put(keyArray[i], i);
    }
    /**
     * Creates a new Arrangement with 0.5f as load factor using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new Arrangement.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public Arrangement(final K[] keyArray, CrossHash.IHasher hasher) {
        this(keyArray, DEFAULT_LOAD_FACTOR, hasher);
    }

    private int realSize() {
        return containsNullKey ? size - 1 : size;
    }
    private void ensureCapacity(final int capacity) {
        final int needed = arraySize(capacity, f);
        if (needed > n)
            rehash(needed);
    }
    private void tryCapacity(final long capacity) {
        final int needed = (int) Math.min(
                1 << 30,
                Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(capacity
                        / f))));
        if (needed > n)
            rehash(needed);
    }
    private int removeEntry(final int pos) {
        size--;
        fixOrder(pos);
        shiftKeys(pos);
        final int oldValue = value[pos];
        fixValues(oldValue);
        if (size < (maxFill >>> 2) && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return oldValue;
    }
    private int removeNullEntry() {
        containsNullKey = false;
        key[n] = null;
        final int oldValue = value[n];
        size--;
        fixOrder(n);
        fixValues(oldValue);
        if (size < (maxFill >>> 2) && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return oldValue;
    }

    @Override
    public void putAll(Map<? extends K, ? extends Integer> m) {
        if (f <= .5)
            ensureCapacity(m.size()); // The resulting map will be sized for
            // m.size() elements
        else
            tryCapacity(size() + m.size()); // The resulting map will be
        int n = m.size();
        final Iterator<? extends K> i = m
                .keySet().iterator();
        while (n-- != 0) {
            add(i.next());
        }
    }

    public void putAll(K[] keyArray) {
        int n = keyArray.length;
        if (f <= .5)
            ensureCapacity(n); // The resulting map will be sized for
            // m.size() elements
        else
            tryCapacity(size() + n); // The resulting map will be
        // tentatively sized for size() + keyArray.length elements
        for (int i = 0; i < n; i++) {
            add(keyArray[i]);
        }
    }

    public void putAll(Collection<? extends K> keyColl) {
        if (f <= .5)
            ensureCapacity(keyColl.size()); // The resulting map will be sized for
            // keyColl.size() elements
        else
            tryCapacity(size() + keyColl.size()); // The resulting map will be
        // tentatively sized for size() + keyColl.size() elements
        Iterator<? extends K> it = keyColl.iterator();
        while (it.hasNext())
            add(it.next());
    }

    private int insert(final K k) {
        int pos;
        if (k == null) {
            if (containsNullKey)
                return n;
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) != null) {
                if (hasher.areEqual(curr, k)) {
                    return pos;
                }
                while ((curr = key[pos = (pos + 1) & mask]) != null)
                    if (hasher.areEqual(curr, k)) {
                        return pos;
                    }
            }
        }
        key[pos] = k;
        order.add(pos);
        value[pos] = size;
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return -1;
    }
    private int insertAt(final K k, final int at) {
        int pos;
        if (k == null) {
            if (containsNullKey)
                return n;
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) != null) {
                if (hasher.areEqual(curr, k)) {
                    order.removeIndex(value[pos]);
                    order.insert(at, pos);
                    return pos;
                }
                while ((curr = key[pos = (pos + 1) & mask]) != null)
                    if (hasher.areEqual(curr, k)) {
                        order.removeIndex(value[pos]);
                        order.insert(at, pos);
                        return pos;
                    }
            }
        }
        key[pos] = k;
        order.insert(at, pos);
        value[pos] = at;
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return pos;
    }

    /**
     * Puts the key k into this Arrangement with a value equal to the current number of keys; v is disregarded.
     * @param k any K type, including null
     * @param v any Integer, doesn't matter what it is and will be disregarded. Only here for compatibility
     * @return the Integer that was previously associated with k, or -1 if there was none
     */
    @Deprecated
    public Integer put(final K k, final Integer v) {
        final int pos = insert(k);
        if (pos < 0)
            return defRetValue;
        final Integer oldValue = value[pos];
        value[pos] = size-1;
        return oldValue;
    }

    public int put(final K k, final int v) {
        final int pos = insert(k);
        if (pos < 0)
            return defRetValue;
        final int oldValue = value[pos];
        value[pos] = size-1;
        return oldValue;
    }

    public int add(final K k) {
        final int pos = insert(k);
        if (pos < 0)
            return defRetValue;
        final int oldValue = value[pos];
        value[pos] = size - 1;
        return oldValue;
    }


    public int addIfAbsent(final K k)
    {
        int kPos;
        if((kPos = getInt(k)) < 0)
            return add(k);
        return kPos;
    }

    /**
     * If the given key {@code k} is present, this returns its index without modifying the Arrangement; otherwise, it
     * adds k to the end of the collection and returns the index for it there.
     * @param k a key to get the index of, adding it if not present
     * @return the index of {@code k} in this Arrangement
     */
    public int addOrIndex(final K k)
    {
        int kPos;
        if((kPos = getInt(k)) < 0)
        {
            insert(k);
            return size - 1;
        }
        return kPos;
    }

    protected void fixValues(int start)
    {
        for (int i = start; i < size; i++) {
            value[order.items[i]] = i;
        }
    }

    /**
     * Shifts left entries with the specified hash code, starting at the
     * specified position, and empties the resulting free entry.
     *
     * @param pos
     *            a starting position.
     */
    protected final void shiftKeys(int pos) {
        // Shift entries with the same hash.
        int last, slot;
        K curr;
        final K[] key = this.key;
        for (;;) {
            pos = ((last = pos) + 1) & mask;
            for (;;) {
                if ((curr = key[pos]) == null) {
                    key[last] = null;
                    return;
                }
                slot = (hasher.hash(curr))
                        & mask;
                if (last <= pos ? last >= slot || slot > pos : last >= slot
                        && slot > pos)
                    break;
                pos = (pos + 1) & mask;
            }
            key[last] = curr;
            fixOrder(pos, last);
        }
    }

    /**
     * Shifts left entries with the specified hash code, starting at the
     * specified position, and empties the resulting free entry.
     *
     * @param pos
     *            a starting position.
     */
    protected final void shiftKeysValues(int pos) {
        // Shift entries with the same hash.
        int last, slot;
        K curr;
        int v;
        final K[] key = this.key;
        final int[] val = this.value;
        for (;;) {
            pos = ((last = pos) + 1) & mask;
            for (;;) {
                if ((curr = key[pos]) == null) {
                    key[last] = null;
                    val[last] = -1;
                    return;
                }
                v = val[pos];
                slot = (hasher.hash(curr))
                        & mask;
                if (last <= pos ? last >= slot || slot > pos : last >= slot
                        && slot > pos)
                    break;
                pos = (pos + 1) & mask;
            }
            key[last] = curr;
            val[last] = v;
            fixOrder(pos, last);
        }
    }
    @SuppressWarnings("unchecked")
    protected Integer rem(final Object k) {
        if (k == null) {
            if (containsNullKey)
                return removeNullEntry();
            return null;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return null;
        if (hasher.areEqual(k, curr))
            return removeEntry(pos);
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return null;
            if (hasher.areEqual(k, curr))
                return removeEntry(pos);
        }
    }
    public Integer remove(Object o)
    {
        return rem(o);
    }
    @SuppressWarnings("unchecked")
    public int removeInt(final Object k) {
        if (k == null) {
            if (containsNullKey)
                return removeNullEntry();
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr))
            return removeEntry(pos);
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr))
                return removeEntry(pos);
        }
    }
    private int setValue(final int pos, final int v) {
        final int oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    /**
     * Removes the mapping associated with the first key in iteration order.
     *
     * @return the value previously associated with the first key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public K removeFirst() {
        if (size == 0)
            throw new NoSuchElementException();
        final int pos = order.removeIndex(0);
        K fst = key[pos];
        size--;
        final int v = value[pos];
        if (pos == n) {
            containsNullKey = false;
            key[n] = null;
        } else
            shiftKeys(pos);
        fixValues(v);
        if (size < maxFill / 4 && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return fst;
    }
    /**
     * Removes the mapping associated with the last key in iteration order.
     *
     * @return the value previously associated with the last key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public K removeLast() {
        if (size == 0)
            throw new NoSuchElementException();
        final int pos = order.pop();
        K lst = key[pos];
        size--;
        if (pos == n) {
            containsNullKey = false;
            key[n] = null;
        } else
            shiftKeys(pos);
        //fixValues(v); // one case where we don't need to do this; the last item is just given -1
        value[pos] = -1;
        if (size < maxFill >> 2 && n > DEFAULT_INITIAL_SIZE)
            rehash(n >> 1);
        return lst;
    }
    private void moveIndexToFirst(final int i) {
        if(size <= 1 || order.items[0] == i)
            return;
        order.moveToFirst(i);
        fixValues(0);
    }
    private void moveIndexToLast(final int i) {
        if(size <= 1 || order.items[order.size-1] == i)
            return;
        order.moveToLast(i);
        fixValues(i);
    }
    /**
     * Returns the value to which the given key is mapped; if the key is
     * present, it is moved to the first position of the iteration order.
     *
     * @param k
     *            the key.
     * @return the corresponding value, or -1 if no value was present for the given key.
     */
    public int getAndMoveToFirst(final K k) {
        if (k == null) {
            if (containsNullKey) {
                moveIndexToFirst(n);
                return value[n];
            }
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr)) {
            moveIndexToFirst(pos);
            return value[pos];
        }
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr)) {
                moveIndexToFirst(pos);
                return value[pos];
            }
        }
    }
    /**
     * Returns the value to which the given key is mapped; if the key is
     * present, it is moved to the last position of the iteration order.
     *
     * @param k
     *            the key.
     * @return the corresponding value, or -1 if no value was present for the given key.
     */
    public int getAndMoveToLast(final K k) {
        if (k == null) {
            if (containsNullKey) {
                moveIndexToLast(n);
                return value[n];
            }
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr)) {
            moveIndexToLast(pos);
            return value[pos];
        }
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr)) {
                moveIndexToLast(pos);
                return value[pos];
            }
        }
    }
    /**
     * Adds a pair to the map; if the key is already present, it is moved to the
     * first position of the iteration order.
     *
     * @param k
     *            the key.
     * @param v
     *            the value.
     * @return the old value, or -1 if no value was present for the given key.
     */
    public int putAndMoveToFirst(final K k, final int v) {
        int pos;
        if (k == null) {
            if (containsNullKey) {
                moveIndexToFirst(n);
                return setValue(n, 0);
            }
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if (!((curr = key[pos = (hasher.hash(k)) & mask]) == null)) {
                if (hasher.areEqual(curr, k)) {
                    moveIndexToFirst(pos);
                    return setValue(pos, 0);
                }
                while (!((curr = key[pos = (pos + 1) & mask]) == null))
                    if (hasher.areEqual(curr, k)) {
                        moveIndexToFirst(pos);
                        return setValue(pos, 0);
                    }
            }
        }
        key[pos] = k;
        order.insert(0, pos);
        fixValues(0);
        if (size++ >= maxFill)
            rehash(arraySize(size, f));
        return defRetValue;
    }
    /**
     * Adds a pair to the map; if the key is already present, it is moved to the
     * last position of the iteration order.
     *
     * @param k
     *            the key.
     * @param v
     *            the value.
     * @return the old value, or -1 if no value was present for the given key.
     */
    public int putAndMoveToLast(final K k, final int v) {
        int pos;
        if (k == null) {
            if (containsNullKey) {
                moveIndexToLast(n);
                return setValue(n, size - 1);
            }
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if (!((curr = key[pos = (hasher.hash(k)) & mask]) == null)) {
                if (hasher.areEqual(curr, k)) {
                    moveIndexToLast(pos);
                    return setValue(pos, size - 1);
                }
                while (!((curr = key[pos = (pos + 1) & mask]) == null))
                    if (hasher.areEqual(curr, k)) {
                        moveIndexToLast(pos);
                        return setValue(pos, size - 1);
                    }
            }
        }
        key[pos] = k;
        value[pos] = size;
        order.add(pos);
        if (size++ >= maxFill)
            rehash(arraySize(size, f));
        return defRetValue;
    }
    public Integer get(final Object k) {
        if (k == null)
            return containsNullKey ? value[n] : defRetValue;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr))
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr))
                return value[pos];
        }
    }
    public int getInt(final Object k) {
        if (k == null)
            return containsNullKey ? value[n] : defRetValue;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr))
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr))
                return value[pos];
        }
    }

    public boolean containsKey(final Object k) {
        if (k == null)
            return containsNullKey;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return false;
        if (hasher.areEqual(k, curr))
            return true;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return false;
            if (hasher.areEqual(k, curr))
                return true;
        }
    }
    public boolean containsValue(final int v) {
        return v >= 0 && v < size;
    }
    @Override
    public boolean containsValue(final Object ov) {
        return ov != null && containsValue(((Integer) ov).intValue());
    }
    /*
     * Removes all elements from this map.
     *
     * <P>To increase object reuse, this method does not change the table size.
     * If you want to reduce the table size, you must use {@link #trim()}.
     */
    public void clear() {
        if (size == 0)
            return;
        size = 0;
        containsNullKey = false;
        Arrays.fill(key, null);
        Arrays.fill(value, -1);
        order.clear();
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * Returns an iterator over elements of type {@code T}.
     *
     * @return an Iterator.
     */
    @Override
    public Iterator<K> iterator() {
        return new KeyIterator();
    }

    /**
     * The entry class for a hash map does not record key and value, but rather
     * the position in the hash table of the corresponding entry. This is
     * necessary so that calls to {@link java.util.Map.Entry#setValue(Object)}
     * are reflected in the map
     */
    final class MapEntry
            implements
            Map.Entry<K, Integer> {
        // The table index this entry refers to, or -1 if this entry has been
        // deleted.
        int index;
        MapEntry(final int index) {
            this.index = index;
        }
        MapEntry() {
        }
        public K getKey() {
            return key[index];
        }
        /**
         * {@inheritDoc}
         *
         * @deprecated Please use the corresponding type-specific method
         *             instead.
         */
        @Deprecated
        public Integer getValue() {
            return value[index];
        }
        public int getIntValue() {
            return value[index];
        }
        public int setValue(final int v) {
            final int oldValue = value[index];
            value[index] = v;
            return oldValue;
        }
        public Integer setValue(final Integer v) {
            return setValue(v.intValue());
        }

        @SuppressWarnings("unchecked")
        public boolean equals(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry<K, Integer> e = (Map.Entry<K, Integer>) o;
            return (key[index] == null
                    ? e.getKey() == null
                    : key[index].equals(e.getKey()))
                    && (value[index] == e.getValue());
        }
        public int hashCode() {
            return (key[index] == null ? 0 : hasher.hash(key[index]))
                    ^ value[index];
        }
        public String toString() {
            return key[index] + "=>" + value[index];
        }
    }

    /**
     * Modifies the link vector so that the given entry is removed. This method will complete in linear time.
     *
     * @param i the index of an entry.
     */
    protected void fixOrder(final int i) {
        if (size == 0) {
            order.clear();
            return;
        }
        order.removeValue(i);
    }

    /**
     * Modifies the link vector for a shift from s to d.
     * <br>
     * This method will complete in logarithmic time or better.
     *
     * @param s the source position.
     * @param d the destination position.
     */
    protected void fixOrder(int s, int d) {
        if(size == 0)
            return;
        if (size == 1 || order.items[0] == s) {
            order.set(0, d);
        }
        else if (order.items[order.size-1] == s) {
            order.set(order.size - 1, d);
        }
        else
        {
            int idx = order.indexOf(s);
            order.set(idx, d);
        }
    }

    /**
     * Returns the first key of this map in iteration order.
     *
     * @return the first key in iteration order.
     */
    public K firstKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[0]];
    }
    /**
     * Returns the last key of this map in iteration order.
     *
     * @return the last key in iteration order.
     */
    public K lastKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[order.size-1]];
    }
    /**
     * Retains in this collection only elements from the given collection.
     *
     * @param c a collection.
     * @return <code>true</code> if this collection changed as a result of the
     * call.
     */
    public boolean retainAll(Collection<?> c) {
        boolean retVal = false;
        int n = size;
        while (n-- != 0) {
            if (!c.contains(key[order.get(n)])) {
                removeAt(n);
                retVal = true;
            }
        }
        return retVal;
    }

    public Comparator<? super K> comparator() {
        return null;
    }
    public SortedMap<K, Integer> tailMap(K from) {
        throw new UnsupportedOperationException();
    }
    public SortedMap<K, Integer> headMap(K to) {
        throw new UnsupportedOperationException();
    }
    public SortedMap<K, Integer> subMap(K from, K to) {
        throw new UnsupportedOperationException();
    }
    /**
     * A list iterator over a Arrangement.
     *
     * <P>
     * This class provides a list iterator over a Arrangement. The
     * constructor runs in constant time.
     */
    private class MapIterator {
        /**
         * The entry that will be returned by the next call to
         * {@link ListIterator#previous()} (or <code>null</code> if no
         * previous entry exists).
         */
        int prev = -1;
        /**
         * The entry that will be returned by the next call to
         * {@link ListIterator#next()} (or <code>null</code> if no
         * next entry exists).
         */
        int next = -1;
        /**
         * The last entry that was returned (or -1 if we did not iterate or used
         * {@link Iterator#remove()}).
         */
        int curr = -1;
        /**
         * The current index (in the sense of a {@link ListIterator}).
         * Note that this value is not meaningful when this iterator has been
         * created using the nonempty constructor.
         */
        int index = 0;
        private MapIterator() {
            next = size == 0 ? -1 : order.items[0];
            index = 0;
        }
        /*
        private MapIterator(final K from) {
            if (((from) == null)) {
                if (containsNullKey) {
                    next = (int) link[n];
                    prev = n;
                    return;
                } else
                    throw new NoSuchElementException("The key null"
                            + " does not belong to this map.");
            }
            if (((key[last]) != null && (key[last]).equals(from))) {
                prev = last;
                index = size;
                return;
            }
            // The starting point.
            int pos = (((from).hashCode()))
                    & mask;
            // There's always an unused entry.
            while (!((key[pos]) == null)) {
                if (((key[pos]).equals(from))) {
                    // Note: no valid index known.
                    next = (int) link[pos];
                    prev = pos;
                    return;
                }
                pos = (pos + 1) & mask;
            }
            throw new NoSuchElementException("The key " + from
                    + " does not belong to this map.");
        }*/
        public boolean hasNext() {
            return next != -1;
        }
        public boolean hasPrevious() {
            return prev != -1;
        }
        private void ensureIndexKnown() {
            if (index >= 0)
                return;
            if (prev == -1) {
                index = 0;
                return;
            }
            if (next == -1) {
                index = size;
                return;
            }
            index = 0;
            /*while (pos != prev) {
                pos = (int) link[pos];
                index++;
            }*/
        }
        public int nextIndex() {
            ensureIndexKnown();
            return index + 1;
        }
        public int previousIndex() {
            ensureIndexKnown();
            return index - 1;
        }
        public int nextEntry() {
            if (!hasNext())
                throw new NoSuchElementException();
            curr = next;
            if(++index >= order.size)
                next = -1;
            else
                next = order.get(index);//(int) link[curr];
            prev = curr;
            return curr;
        }
        public int previousEntry() {
            if (!hasPrevious())
                throw new NoSuchElementException();
            curr = prev;
            if(--index < 1)
                prev = -1;
            else
                prev = order.get(index - 1);
            //prev = (int) (link[curr] >>> 32);
            next = curr;
            return curr;
        }
        public void remove() {
            ensureIndexKnown();
            if (curr == -1)
                throw new IllegalStateException();
            if (curr == prev) {
				/*
				 * If the last operation was a next(), we are removing an entry
				 * that precedes the current index, and thus we must decrement
				 * it.
				 */
                if(--index >= 1)
                    prev = order.get(index - 1); //(int) (link[curr] >>> 32);
                else
                    prev = -1;
            } else {
                if(index < order.size - 1)
                    next = order.get(index + 1);
                else
                    next = -1;
            }
            order.removeIndex(index);
            size--;
            int last, slot, pos = curr;
            curr = -1;
            if (pos == n) {
                containsNullKey = false;
                key[n] = null;
            } else {
                K curr;
                final K[] key = Arrangement.this.key;
                // We have to horribly duplicate the shiftKeys() code because we
                // need to update next/prev.
                for (;;) {
                    pos = ((last = pos) + 1) & mask;
                    for (;;) {
                        if ((curr = key[pos]) == null) {
                            key[last] = null;
                            fixValues(index);
                            return;
                        }
                        slot = (hasher.hash(curr)) & mask;
                        if (last <= pos
                                ? last >= slot || slot > pos
                                : last >= slot && slot > pos)
                            break;
                        pos = (pos + 1) & mask;
                    }
                    key[last] = curr;
                    if (next == pos)
                        next = last;
                    if (prev == pos)
                        prev = last;
                    fixOrder(pos, last);
                }
            }
        }
        public int skip(final int n) {
            int i = n;
            while (i-- != 0 && hasNext())
                nextEntry();
            return n - i - 1;
        }
        public int back(final int n) {
            int i = n;
            while (i-- != 0 && hasPrevious())
                previousEntry();
            return n - i - 1;
        }
    }
    private class EntryIterator extends MapIterator
            implements
            Iterator<Entry<K, Integer>>, Serializable {
        private static final long serialVersionUID = 0L;

        private MapEntry entry;
        public EntryIterator() {
        }
        public MapEntry next() {
            return entry = new MapEntry(nextEntry());
        }
        public MapEntry previous() {
            return entry = new MapEntry(previousEntry());
        }
        @Override
        public void remove() {
            super.remove();
            entry.index = -1; // You cannot use a deleted entry.
        }
        public void set(Entry<K, Integer> ok) {
            throw new UnsupportedOperationException();
        }
        public void add(Entry<K, Integer> ok) {
            throw new UnsupportedOperationException();
        }
    }

    public class FastEntryIterator extends MapIterator implements ListIterator<MapEntry>, Serializable {
        private static final long serialVersionUID = 0L;

        final MapEntry entry = new MapEntry();

        public FastEntryIterator() {
        }
        public MapEntry next() {
            entry.index = nextEntry();
            return entry;
        }
        public MapEntry previous() {
            entry.index = previousEntry();
            return entry;
        }
        public void set(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
        public void add(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
    }
    private final class MapEntrySet
            implements Cloneable, SortedSet<Entry<K, Integer>>, Set<Entry<K, Integer>>, Collection<Entry<K, Integer>>, Serializable {
        private static final long serialVersionUID = 0L;
        public EntryIterator iterator() {
            return new EntryIterator();
        }
        public Comparator<? super Entry<K, Integer>> comparator() {
            return null;
        }
        public SortedSet<Entry<K, Integer>> subSet(
                Entry<K, Integer> fromElement,
                Entry<K, Integer> toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<Entry<K, Integer>> headSet(
                Entry<K, Integer> toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<Entry<K, Integer>> tailSet(
                Entry<K, Integer> fromElement) {
            throw new UnsupportedOperationException();
        }
        public Entry<K, Integer> first() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[0]);
        }
        public Entry<K, Integer> last() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[order.size-1]);
        }
        @SuppressWarnings("unchecked")
        public boolean contains(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            final Entry<?, ?> e = (Entry<?, ?>) o;
            final K k = (K) e.getKey();
            final int v = (Integer) e.getValue();
            if (k == null)
                return containsNullKey
                        && (value[n] == v);
            K curr;
            final K[] key = Arrangement.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
                return false;
            if (hasher.areEqual(k, curr))
                return value[pos] == v;
            // There's always an unused entry.
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == null)
                    return false;
                if (hasher.areEqual(k, curr))
                    return value[pos] == v;
            }
        }
        @SuppressWarnings("unchecked")
        protected boolean rem(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            final Entry<?, ?> e = (Entry<?, ?>) o;
            final K k = (K) e.getKey();
            final int v = (Integer) e.getValue();
            if (k == null) {
                if (containsNullKey
                        && value[n] == v) {
                    removeNullEntry();
                    return true;
                }
                return false;
            }
            K curr;
            final K[] key = Arrangement.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
                return false;
            if (hasher.areEqual(curr, k)) {
                if (value[pos] == v) {
                    removeEntry(pos);
                    return true;
                }
                return false;
            }
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == null)
                    return false;
                if (hasher.areEqual(curr, k)) {
                    if (value[pos] == v) {
                        removeEntry(pos);
                        return true;
                    }
                }
            }
        }
        @Override
        public boolean remove(Object o)
        {
            return rem(o);
        }
        public int size() {
            return size;
        }
        public void clear() {
            Arrangement.this.clear();
        }

        public FastEntryIterator fastIterator() {
            return new FastEntryIterator();
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            return s.size() == size() && containsAll(s);
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        @SuppressWarnings("unchecked")
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Unsupported.
         *
         * @param c ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean addAll(Collection<? extends Entry<K, Integer>> c) {
            throw new UnsupportedOperationException("addAll not supported");
        }

        /**
         * Unsupported.
         *
         * @param k ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean add(Entry<K, Integer> k) {
            throw new UnsupportedOperationException("add not supported");
        }

        /**
         * Checks whether this collection contains all elements from the given
         * collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection contains all elements of the
         * argument.
         */
        public boolean containsAll(Collection<?> c) {
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (!contains(i.next()))
                    return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean retainAll(Collection<?> c) {
            boolean retVal = false;
            int n = size();
            final Iterator<?> i = iterator();
            while (n-- != 0) {
                if (!c.contains(i.next())) {
                    i.remove();
                    retVal = true;
                }
            }
            return retVal;
        }

        /**
         * Remove from this collection all elements in the given collection. If the
         * collection is an instance of this class, it uses faster iterators.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean removeAll(Collection<?> c) {
            boolean retVal = false;
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (remove(i.next()))
                    retVal = true;
            return retVal;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            final EntryIterator i = iterator();
            int n = size();
            MapEntry k;
            boolean first = true;
            s.append("{");
            while (n-- != 0) {
                if (first)
                    first = false;
                else
                    s.append(", ");
                k = i.next();                 
                s.append(this == key[k.index] 
                        ? "(this Arrangement)" 
                        : String.valueOf(key[k.index]))
                        .append("=>").append(value[k.index]);
            }
            s.append("}");
            return s.toString();
        }

    }

    @Override
    public SortedSet<Entry<K, Integer>> entrySet() {
        if (entries == null) entries = new MapEntrySet();
        return entries;
    }
    public MapEntrySet mapEntrySet() {
        if (entries == null) entries = new MapEntrySet();
        return entries;
    }

    /**
     * An iterator on keys.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return keys
     * instead of entries.
     */
    public final class KeyIterator extends MapIterator implements Iterator<K>, Serializable {
        private static final long serialVersionUID = 0L;
        public K previous() {
            return key[previousEntry()];
        }
        public void set(K k) {
            throw new UnsupportedOperationException();
        }
        public void add(K k) {
            throw new UnsupportedOperationException();
        }
        public KeyIterator() {}
        public K next() {
            return key[nextEntry()];
        }
        public void remove() { super.remove(); }
    }

    public final class KeySet implements SortedSet<K>, Serializable {
        private static final long serialVersionUID = 0L;

        public KeyIterator iterator() {
            return new KeyIterator();
        }

        public int size() {
            return size;
        }

        public void clear() {
            Arrangement.this.clear();
        }

        public K first() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[0]];
        }

        public K last() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[order.size-1]];
        }

        public Comparator<K> comparator() {
            return null;
        }

        public final SortedSet<K> tailSet(K from) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<K> headSet(K to) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<K> subSet(K from, K to) {
            throw new UnsupportedOperationException();
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            unwrap(iterator(), a);
            return a;
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean remove(Object ok) {
            throw new UnsupportedOperationException("Cannot remove from the key set directly");
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean add(final K o) {
            throw new UnsupportedOperationException("Cannot add to the key set directly");
        }

        /**
         * Delegates to the corresponding type-specific method.
         */
        public boolean contains(final Object o) {
            return containsKey(o);
        }

        /**
         * Checks whether this collection contains all elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection contains all elements of the argument.
         */
        public boolean containsAll(Collection<?> c) {
            final Iterator<?> i = c.iterator();
            int n = c.size();
            while (n-- != 0)
                if (!contains(i.next())) return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean retainAll(Collection<?> c) {
            throw new UnsupportedOperationException("Cannot remove from the key set directly");
        }

        /**
         * Remove from this collection all elements in the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean removeAll(Collection<?> c) {
            throw new UnsupportedOperationException("Cannot remove from the key set directly");
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Always throws an UnsupportedOperationException.
         * @param c disregarded; always throws Exception
         * @return nothing; always throws Exception
         */
        public boolean addAll(Collection<? extends K> c) {
            throw new UnsupportedOperationException("Cannot add to the key set directly");
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            if (s.size() != size())
                return false;
            return containsAll(s);
        }
        /**
         * Unwraps an iterator into an array starting at a given offset for a given number of elements.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
         * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
         *
         * @param i      a type-specific iterator.
         * @param array  an array to contain the output of the iterator.
         * @param offset the first element of the array to be returned.
         * @param max    the maximum number of elements to unwrap.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array, int offset, final int max) {
            if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
            if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
            int j = max;
            while (j-- != 0 && i.hasNext())
                array[offset++] = i.next();
            return max - j - 1;
        }

        /**
         * Unwraps an iterator into an array.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
         * of the array has been reached.
         *
         * @param i     a type-specific iterator.
         * @param array an array to contain the output of the iterator.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array) {
            return unwrap(i, array, 0, array.length);
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            boolean first = true;
            K k;
            s.append("{");
            for (int i = 0; i < size; i++) {
                if (first) first = false;
                else s.append(", ");
                k = keyAt(i);
                s.append(k == Arrangement.this ? "(this collection)" : String.valueOf(k));
            }
            s.append("}");
            return s.toString();
        }
    }

    public KeySet keySet() {
        if (keys == null) keys = new KeySet();
        return keys;
    }

    public OrderedSet<K> keysAsOrderedSet()
    {
        OrderedSet<K> os = new OrderedSet<K>(size, f, hasher);
        for (int i = 0; i < size; i++) {
            os.add(keyAt(i));
        }
        return os;
    }

    /**
     * An iterator on values.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return values
     * instead of entries.
     */
    public final class ValueIterator extends MapIterator implements ListIterator<Integer>, Serializable {
        private static final long serialVersionUID = 0L;

        public Integer previous() {
            return (index < 0) ? -1 : --index;
        }
        public int previousInt() {
            return (index < 0) ? -1 : --index;
        }
        public void set(Integer v) {
            throw new UnsupportedOperationException();
        }
        public void add(Integer v) {
            throw new UnsupportedOperationException();
        }
        public ValueIterator() {}
        public Integer next() {
            return (index >= size - 1) ? -1 : ++index;
        }public int nextInt() {
            return (index >= size - 1) ? -1 : ++index;
        }
        public void remove() { super.remove(); }
    }
    public final class ValueCollection extends AbstractCollection<Integer> implements Serializable
    {
        private static final long serialVersionUID = 0L;
        public ValueIterator iterator() {
            return new ValueIterator();
        }
        public int size() {
            return size;
        }
        public boolean contains(Object v) {
            return containsValue(v);
        }
        public void clear() {
            Arrangement.this.clear();
        }
    }
    public Collection<Integer> values() {
        if (values == null) values = new ValueCollection();
        return values;
    }

    public ArrayList<Integer> valuesAsList()
    {
        ArrayList<Integer> ls = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            ls.add(i);
        }
        return ls;
    }

    public IntVLA valuesAsIntVLA()
    {
        return new IntVLA(ArrayTools.range(size));
    }
    public int[] valuesAsArray()
    {
        return ArrayTools.range(size);
    }

    /**
     * Rehashes the map, making the table as small as possible.
     * <p>
     * <P>This method rehashes the table to the smallest size satisfying the load factor. It can be used when the set will not be changed anymore, so to optimize access speed and size.
     * <p>
     * <P>If the table size is already the minimum possible, this method does nothing.
     *
     * @return true if there was enough memory to trim the map.
     * @see #trim(int)
     */
    public boolean trim() {
        final int l = arraySize(size, f);
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes this map if the table is too large.
     * <p>
     * <P>Let <var>N</var> be the smallest table size that can hold <code>max(n,{@link #size()})</code> entries, still satisfying the load factor. If the current table size is smaller than or equal to
     * <var>N</var>, this method does nothing. Otherwise, it rehashes this map in a table of size <var>N</var>.
     * <p>
     * <P>This method is useful when reusing maps. {@linkplain #clear() Clearing a map} leaves the table size untouched. If you are reusing a map many times, you can call this method with a typical
     * size to avoid keeping around a very large table just because of a few large transient maps.
     *
     * @param n the threshold for the trimming.
     * @return true if there was enough memory to trim the map.
     * @see #trim()
     */
    public boolean trim(final int n) {
        final int l = HashCommon.nextPowerOfTwo((int) Math.ceil(n / f));
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes the map.
     *
     * <P>
     * This method implements the basic rehashing strategy, and may be overriden
     * by subclasses implementing different rehashing strategies (e.g.,
     * disk-based rehashing). However, you should not override this method
     * unless you understand the internal workings of this class.
     *
     * @param newN
     *            the new size
     */

    @SuppressWarnings("unchecked")
    protected void rehash(final int newN) {
        final K[] key = this.key;
        final int[] value = this.value;
        final int mask = newN - 1; // Note that this is used by the hashing macro
        final K[] newKey = (K[]) new Object[newN + 1];
        final int[] newValue = new int[newN + 1];
        final int sz = order.size;
        K k;
        int i, pos;
        final int[] oi = order.items;
        for (int q = 0; q < sz; q++) {
            i = oi[q];
            if ((k = key[i]) == null)
                pos = newN;
            else {
                pos = (hasher.hash(k)) & mask;
                while (newKey[pos] != null)
                    pos = (pos + 1) & mask;
            }
            newKey[pos] = k;
            newValue[pos] = value[i];
            oi[q] = pos;
        }

        n = newN;
        this.mask = mask;
        maxFill = maxFill(n, f);
        this.key = newKey;
        this.value = newValue;
    }
    /**
     * Returns a deep copy of this map.
     *
     * <P>
     * This method performs a deep copy of this Arrangement; the data stored in the
     * map, however, is not cloned. Note that this makes a difference only for
     * object keys.
     *
     * @return a deep copy of this map.
     */
    @SuppressWarnings("unchecked")
    @GwtIncompatible
    public Arrangement<K> clone() {
        Arrangement<K> c;
        try {
            c = (Arrangement<K>) super.clone();
            c.key = (K[]) new Object[n + 1];
            System.arraycopy(key, 0, c.key, 0, n + 1);
            c.value = new int[n + 1];
            System.arraycopy(value, 0, c.value, 0, n + 1);
            c.order = (IntVLA) order.clone();
            c.hasher = hasher;
            return c;
        } catch (Exception cantHappen) {
            throw new UnsupportedOperationException(cantHappen + (cantHappen.getMessage() != null ?
                    "; " + cantHappen.getMessage() : ""));
        }
    }
    /**
     * Returns a hash code for this map.
     *
     * This method overrides the generic method provided by the superclass.
     * Since <code>equals()</code> is not overriden, it is important that the
     * value returned by this method is the same value as the one returned by
     * the overriden method.
     *
     * @return a hash code for this map.
     */
    public int hashCode() {
        int h = 0;
        for (int j = realSize(), i = 0, t = 0; j-- != 0;) {
            while (key[i] == null)
                i++;
            if (this != key[i])
                t = hasher.hash(key[i]);
            t ^= value[i];
            h += t;
            i++;
        }
        // Zero / null keys have hash zero.
        if (containsNullKey)
            h += value[n];
        return h;
    }
    public long hash64()
    {
        return 31L * CrossHash.hash64(key) + size;
    }

    /**
     * Returns the maximum number of entries that can be filled before rehashing.
     *
     * @param n the size of the backing array.
     * @param f the load factor.
     * @return the maximum number of entries before rehashing.
     */
    public static int maxFill(final int n, final float f) {
        /* We must guarantee that there is always at least
		 * one free entry (even with pathological load factors). */
        return Math.min((int) Math.ceil(n * f), n - 1);
    }

    /**
     * Returns the maximum number of entries that can be filled before rehashing.
     *
     * @param n the size of the backing array.
     * @param f the load factor.
     * @return the maximum number of entries before rehashing.
     */
    public static long maxFill(final long n, final float f) {
		/* We must guarantee that there is always at least
		 * one free entry (even with pathological load factors). */
        return Math.min((long) Math.ceil(n * f), n - 1);
    }

    /**
     * Returns the least power of two smaller than or equal to 2<sup>30</sup> and larger than or equal to <code>Math.ceil( expected / f )</code>.
     *
     * @param expected the expected number of elements in a hash table.
     * @param f        the load factor.
     * @return the minimum possible size for a backing array.
     * @throws IllegalArgumentException if the necessary size is larger than 2<sup>30</sup>.
     */
    public static int arraySize(final int expected, final float f) {
        final long s = Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(expected / f)));
        if (s > (1 << 30))
            throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor " + f + ")");
        return (int) s;
    }

    /**
     * Unwraps an iterator into an array starting at a given offset for a given number of elements.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i      a type-specific iterator.
     * @param array  an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max    the maximum number of elements to unwrap.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array, int offset, final int max) {
        if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
        if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
        int j = max;
        while (j-- != 0 && i.hasNext())
            array[offset++] = i.next();
        return max - j - 1;
    }

    /**
     * Unwraps an iterator into an array.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i     a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array) {
        return unwrap(i, array, 0, array.length);
    }


    /** Unwraps an iterator into an array starting at a given offset for a given number of elements.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max the maximum number of elements to unwrap.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array, int offset, final int max ) {
        if ( max < 0 ) throw new IllegalArgumentException( "The maximum number of elements (" + max + ") is negative" );
        if ( offset < 0 || offset + max > array.length ) throw new IllegalArgumentException();
        int j = max;
        while ( j-- != 0 && i.hasNext() )
            array[ offset++ ] = i.next();
        return max - j - 1;
    }

    /** Unwraps an iterator into an array.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array) {
        return objectUnwrap(i, array, 0, array.length );
    }

    @Override
    public String toString() {
        final StringBuilder s = new StringBuilder();
        boolean first = true;
        K k;
        s.append("Arrangement{");
        for (int i = 0; i < size; i++) {
            if (first) first = false;
            else s.append(", ");
            k = keyAt(i);
            s.append(k == Arrangement.this ? "(this collection)" : String.valueOf(k))
                    .append("=>")
                    .append(getAt(i));
        }
        s.append("}");
        return s.toString();
    }
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Map))
            return false;
        Map<?, ?> m = (Map<?, ?>) o;
        if (m.size() != size())
            return false;
        return entrySet().containsAll(m.entrySet());
    }

    @GwtIncompatible
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
        final K[] key = this.key;
        final int[] value = this.value;
        final MapIterator i = new MapIterator();
        s.defaultWriteObject();
        s.writeObject(hasher);
        for (int j = size, e; j-- != 0;) {
            e = i.nextEntry();
            s.writeObject(key[e]);
            s.writeInt(value[e]);
        }
    }
    @GwtIncompatible
    @SuppressWarnings("unchecked")
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
        hasher = (CrossHash.IHasher) s.readObject();
        n = arraySize(size, f);
        maxFill = maxFill(n, f);
        mask = n - 1;
        final K[] key = this.key = (K[]) new Object[n + 1];
        final int[] value = this.value = new int[n + 1];
        final IntVLA order = this.order = new IntVLA(n + 1);
        K k;
        int v;
        for (int i = size, pos; i-- != 0;) {
            k = (K) s.readObject();
            v = s.readInt();
            if (k == null) {
                pos = n;
                containsNullKey = true;
            } else {
                pos = (hasher.hash(k))
                        & mask;
                while (!(key[pos] == null))
                    pos = (pos + 1) & mask;
            }

            key[pos] = k;
            value[pos] = v;
            order.add(pos);
        }
    }

    /**
     * Gets the value at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the value to fetch
     * @return the value at the index, if the index is valid, otherwise the default return value
     */
    public int getAt(final int idx) {
        int pos;
        if (idx < 0 || idx >= order.size)
            return defRetValue;
        // The starting point.
        if (key[pos = order.get(idx)] == null)
            return containsNullKey ? value[n] : defRetValue;
        return value[pos];
    }
    /**
     * Gets the key at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the key to fetch
     * @return the key at the index, if the index is valid, otherwise null
     */
    public K keyAt(final int idx) {
        if (idx < 0 || idx >= order.size)
            return null;
        // The starting point.
        return key[order.get(idx)];
    }

    /**
     * Gets the key-value Map.Entry at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the entry to fetch
     * @return the key-value entry at the index, if the index is valid, otherwise null
     */
    public Entry<K, Integer> entryAt(final int idx)
    {
        if (idx < 0 || idx >= order.size)
            return null;
        return new MapEntry(order.get(idx));
    }

    /**
     * Removes the key and value at the given index in the iteration order in not-exactly constant time (though it still
     * should be efficient).
     * @param idx the index in the iteration order of the key and value to remove
     * @return the key removed, if there was anything removed, or null otherwise
     */
    public K removeAt(final int idx) {

        if (idx < 0 || idx >= order.size)
            return null;
        int pos = order.get(idx);
        K k;
        if ((k = key[pos]) == null) {
            if (containsNullKey) {
                removeNullEntry();
            }
            return null;
        }
        removeEntry(pos);
        return k;
    }

    /**
     * Equivalent to {@link #add(Object)}, except that it can place k at any point in the ordering (shifting up later
     * entries and changing their values to match their new positions in the ordering).
     * @param idx the position in the ordering to place k at; will not be used if negative or greater than the current size (it can be equal to the current size)
     * @param k the key to add into this Arrangement; its value will be idx
     * @return the previous position in the ordering that k had if already present, the previous size of the Arrangement if k was just added now, or -1 if idx is invalid
     */
    public int addAt(final int idx, final K k) {
        if(idx < 0 || idx > size)
            return -1;
        final int pos = insertAt(k, idx), oldValue = value[pos];
        fixValues(idx);
        return oldValue;
    }
    /**
     * Gets a random value from this Arrangement in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a value
     * @return a random value from this Arrangement, or -1 if this is empty
     */
    public int randomValue(IRNG rng)
    {
        if(rng == null)
            return defRetValue;
        return getAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random key from this Arrangement in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a key
     * @return a random key from this Arrangement, or null if this is empty
     */
    public K randomKey(IRNG rng)
    {
        if(rng == null)
            return null;
        return keyAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random entry from this Arrangement in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a entry
     * @return a random key-value entry from this Arrangement
     */
    public Entry<K, Integer> randomEntry(IRNG rng)
    {
        return new MapEntry(order.getRandomElement(rng));
    }

    /**
     * Randomly alters the iteration order for this Arrangement using the given IRNG to shuffle.
     * @param rng used to generate a random ordering
     * @return this for chaining
     */
    public Arrangement<K> shuffle(IRNG rng)
    {
        if(size < 2)
            return this;
        order.shuffle(rng);
        fixValues(0);
        return this;
    }

    /**
     * Given an array or varargs of replacement indices for this Arrangement's iteration order, reorders this so the
     * first item in the returned version is the same as {@code getAt(ordering[0])} (with some care taken for negative
     * or too-large indices), the second item in the returned version is the same as {@code getAt(ordering[1])}, etc.
     * <br>
     * Negative indices are considered reversed distances from the end of ordering, so -1 refers to the same index as
     * {@code ordering[ordering.length - 1]}. If ordering is smaller than {@code size()}, only the indices up to the
     * length of ordering will be modified. If ordering is larger than {@code size()}, only as many indices will be
     * affected as {@code size()}, and reversed distances are measured from the end of this Map's entries instead of
     * the end of ordering. Duplicate values in ordering will produce duplicate values in the returned Map.
     * <br>
     * This method modifies this Arrangement in-place and also returns it for chaining.
     * @param ordering an array or varargs of int indices, where the nth item in ordering changes the nth item in this
     *                 Map to have the value currently in this Map at the index specified by the value in ordering
     * @return this for chaining, after modifying it in-place
     */
    public Arrangement<K> reorder(int... ordering)
    {
        if(ordering == null || ordering.length <= 0)
            return this;
        order.reorder(ordering);
        fixValues(0);
        return this;
    }
    private int alterEntry(final int pos, final K replacement) {
        final int[] value = this.value;
        final int v = value[pos], op = order.indexOf(pos);
        shiftKeysValues(pos);

        int rep;
        if (replacement == null) {
            if (containsNullKey)
                return v;
            rep = n;
            containsNullKey = true;
        } else {
            K curr;
            final K[] key = this.key;

            // The starting point.
            if (!((curr = key[rep = (hasher.hash(replacement)) & mask]) == null)) {
                if (hasher.areEqual(curr, replacement))
                    return v;
                while (!((curr = key[rep = (rep + 1) & mask]) == null))
                    if (hasher.areEqual(curr, replacement))
                        return v;
            }
            key[rep] = replacement;
            value[rep] = v;
        }
        order.set(op, rep);
        return v;
    }
    private int alterNullEntry(final K replacement) {
        containsNullKey = false;
        final int[] value = this.value;
        int v = value[n];
        value[n] = -1;

        int rep;
        if (replacement == null) {
            rep = n;
            containsNullKey = true;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if ((curr = key[rep = (hasher.hash(replacement)) & mask]) != null) {
                if (hasher.areEqual(curr, replacement))
                    return v;
                while ((curr = key[rep = (rep + 1) & mask]) != null)
                    if (hasher.areEqual(curr, replacement))
                        return v;
            }
            key[rep] = replacement;
            value[rep] = v;

        }
        fixOrder(n, rep);
        return v;
    }

    /**
     * Swaps a key, original, for another key, replacement, while keeping replacement at the same point in the iteration
     * order as original and keeping it associated with the same value (which also keeps its iteration index).
     * @param original the key to find and swap out
     * @param replacement the key to replace original with
     * @return the value associated with original before, and replacement now
     */
    public int alter(final K original, final K replacement) {
        if (original == null) {
            if (containsNullKey) {
                return alterNullEntry(replacement);
            }
            else
                return add(replacement);
        }
        else if(hasher.areEqual(original, replacement))
            return getInt(original);
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(original)) & mask]) == null)
            return add(replacement);
        if (hasher.areEqual(original, curr))
            return alterEntry(pos, replacement);
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return add(replacement);
            if (hasher.areEqual(original, curr))
                return alterEntry(pos, replacement);
        }
    }

    public int[] getArray(K[] keys)
    {
        if(keys == null)
            return new int[0];
        int len = keys.length;
        int[] vals = new int[len];
        for (int i = 0; i < len; i++) {
            vals[i] = getInt(keys[i]);
        }
        return vals;
    }

    public int[] getArray(Collection<? extends K> keys)
    {
        if(keys == null)
            return new int[0];
        int len = keys.size(), i = 0;
        int[] vals = new int[len];
        for(K k : keys)
        {
            vals[i++] = getInt(k);
        }
        return vals;
    }

    public IntVLA getMany(Iterable<? extends K> keys)
    {
        if(keys == null)
            return new IntVLA();
        IntVLA vals = new IntVLA();
        for(K k : keys)
        {
            vals.add(getInt(k));
        }
        return vals;
    }

    public OrderedSet<K> keysAt(int... positions)
    {
        if(keys == null || positions == null || positions.length <= 0)
            return new OrderedSet<K>();
        OrderedSet<K> ks = new OrderedSet<>(positions.length);
        for(int i = 0; i < positions.length; i++)
        {
            ks.add(keyAt(positions[i]));
        }
        return ks;
    }
    public OrderedSet<K> keysAt(IntVLA positions)
    {
        if(keys == null || positions == null || positions.size <= 0)
            return new OrderedSet<K>();
        OrderedSet<K> ks = new OrderedSet<>(positions.size);
        for(int i = 0; i < positions.size; i++)
        {
            ks.add(keyAt(positions.get(i)));
        }
        return ks;
    }

    /**
     * Produces a copy of this Arrangement, but only using up to the given amount of items to take. Does a shallow copy
     * of individual keys, so the references will be shared.
     * @param amount the number of items to copy from this Arrangement; will copy all items if greater than size
     * @return a new Arrangement with up to amount items copied from this into it.
     */
    public Arrangement<K> take(int amount)
    {
        amount = Math.min(size, Math.max(0, amount));
        Arrangement<K> nx = new Arrangement<>(amount, f);
        for (int i = 0; i < amount; i++) {
            nx.add(keyAt(i));
        }
        return nx;
    }
    protected int positionOf(final Object k) {
        if (k == null)
        {
            return (containsNullKey) ? n : -1;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return -1;
        if (hasher.areEqual(k, curr))
            return pos;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = pos + 1 & mask]) == null)
                return -1;
            if (hasher.areEqual(k, curr))
                return pos;
        }
    }

    /**
     * Swaps the positions in the ordering for the given items, if they are both present. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right was not
     * present, or because left and right are the same reference (so swapping would do nothing)).
     * @param left an item that should be present in this OrderedSet
     * @param right an item that should be present in this OrderedSet
     * @return true if this OrderedSet changed in ordering as a result of this call, or false otherwise
     */
    public boolean swap(final K left, final K right)
    {
        if(left == right) return false;
        int l = getInt(left);
        if(l < 0) return false;
        int r = getInt(right);
        if(r < 0) return false;
        int posL = order.get(l), posR = order.get(r);
        value[posL] = r;
        value[posR] = l;
        order.swap(l, r);
        return true;
    }
    /**
     * Swaps the given indices in the ordering, if they are both ints between 0 and size. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right referred to
     * an out-of-bounds index, or because left and right are equal (so swapping would do nothing)).
     * @param left an index of an item in this OrderedSet, at least 0 and less than {@link #size()}
     * @param right an index of an item in this OrderedSet, at least 0 and less than {@link #size()}
     * @return true if this OrderedSet changed in ordering as a result of this call, or false otherwise
     */
    public boolean swapIndices(final int left, final int right)
    {
        if(left < 0 || right < 0 || left >= order.size || right >= order.size || left == right) return false;
        int posL = order.get(left), posR = order.get(right);
        value[posL] = right;
        value[posR] = left;
        order.swap(left, right);
        return true;
    }

    /**
     * Changes the K at the given index to replacement while keeping replacement at the same point in the ordering.
     *
     * @param index       an index to replace the K key at
     * @param replacement another K key that will replace the original at the remembered index
     * @return the int associated with the possibly-altered key; should be equal to index
     */
    public int alterAt(int index, K replacement)
    {
        return alter(keyAt(index), replacement);
    }


    /**
     * Sorts this whole Arrangement using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its keys (may need wildcards)
     */
    public void sort(Comparator<? super K> comparator)
    {
        sort(comparator, 0, size);
    }

    /**
     * Sorts a sub-range of this Arrangement from what is currently the index {@code start} up to (but not including)
     * the index {@code end}, using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its keys (may need wildcards)
     * @param start the first index of a key to sort (the index can change after this)
     * @param end the exclusive bound on the indices to sort; often this is just {@link #size()}
     */
    public void sort(Comparator<? super K> comparator, int start, int end)
    {
        TimSort.sort(key, order, start, end, comparator);
        final int[] indices = order.items;
        for (int i = start; i < end; i++) {
            value[indices[i]] = i;
        }
    }
    
}
