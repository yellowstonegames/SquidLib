/*
 * Copyright (C) 2002-2015 Sebastiano Vigna
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package squidpony.squidmath;

import squidpony.annotation.GwtIncompatible;

import java.io.Serializable;
import java.util.*;

/**
 * A generic insertion-ordered hash map with with a fast implementation, originally from fastutil as
 * Object2ObjectLinkedOpenHashMap but modified to support constant-time indexed access of keys, values, and entries,
 * reordering, and optional hash strategies for unusual keys, such as arrays or usually-dense numeric values.
 * <br>
 * Instances of this class use a hash table to represent a map. The table is filled up to a specified <em>load factor</em>, and then doubled in size to accommodate new entries. If the table is
 * emptied below <em>one fourth</em> of the load factor, it is halved in size. However, halving is not performed when deleting entries from an iterator, as it would interfere with the iteration
 * process.
 * <br>
 * Note that {@link #clear()} does not modify the hash table size. Rather, a family of {@linkplain #trim() trimming methods} lets you control the size of the table; this is particularly useful if
 * you reuse instances of this class.
 * <br>
 * Iterators generated by this map will enumerate pairs in the same order in which they have been added to the map (addition of pairs whose key is already present in the set does not change the
 * iteration order). Note that this order has nothing in common with the natural order of the keys. The order is kept by means of a int-specialized list, {@link IntVLA}, and is modifiable with this
 * class' {@link #reorder(int...)} and {@link #shuffle(IRNG)} methods, among other tools. It may be preferable to avoid instantiating an Iterator object and instead
 * use a normal int-based for loop with {@link #getAt(int)} called in each iteration. Though this doesn't allow easy deletion of items during iteration, it may be the
 * fastest way to iterate through an OrderedMap.
 * <br>
 * This class implements the interface of a sorted map, so to allow easy access of the iteration order: for instance, you can get the first key in iteration order with {@code firstKey()} without
 * having to create an iterator; however, this class partially violates the {@link SortedMap} contract because all submap methods throw an exception and {@link #comparator()} returns always
 * <code>null</code>.
 * <br>
 * Additional methods, such as <code>getAndMoveToFirst()</code>, make it easy to use instances of this class as a cache (e.g., with LRU policy).
 * <br>
 * This class allows approximately constant-time lookup of keys or values by their index in the ordering, which can
 * allow some novel usage of the data structure. {@link OrderedSet} can be used like a list of unique elements, keeping
 * order like a list does but also allowing rapid checks for whether an item exists in the OrderedSet, and OrderedMap
 * can be used like that but with values associated as well (where OrderedSet uses contains(), OrderedMap uses
 * containsKey()). You can also set the key and value at a position with {@link #putAt(Object, Object, int)}, or alter
 * the key while keeping its value and index the same with {@link #alter(Object, Object)}. Reordering works here too,
 * both with completely random orders from {@link #shuffle(IRNG)} or with a previously-generated ordering from
 * {@link #reorder(int...)} (you can produce such an ordering for a given size and reuse it across multiple Ordered data
 * structures with {@link IRNG#randomOrdering(int)}). Note that putAt() and {@link #removeAt(int)} do not run in constant
 * time, and depending on the point of insertion/removal, they are likely to run in linear time (but also note that most
 * insertion-ordered Maps and Sets don't allow insertion or removal at anywhere but the beginning or end of the order).
 * <br>
 * You can pass a {@link CrossHash.IHasher} instance such as {@link CrossHash#generalHasher} as an extra parameter to
 * most of this class' constructors, which allows the OrderedMap to use arrays (usually primitive arrays) as keys. If
 * you expect only one type of array, you can use an instance like {@link CrossHash#intHasher} to hash int arrays, or
 * the aforementioned generalHasher to hash most kinds of arrays (it can't handle most multi-dimensional arrays well).
 * If you aren't using arrays as keys, you don't need to give an IHasher to the constructor and can ignore this feature
 * most of the time. However, the default IHasher this uses if none is specified performs a small but significant
 * "mixing" step to make the default generated hashCode() implementation many classes use into a higher-quality
 * random-like value. This isn't always optimal; if you plan to insert 1000 sequential Integer keys with some small
 * amount of random Integers after them, then the mixing actually increases the likelihood of a collision and takes time
 * to calculate. You could use a very simple IHasher in that case, relying on the fact that only Integers will be added:
 * <pre>
 * new CrossHash.IHasher() {
 *     public int hash(Object data) { return (int)data; }
 *     public boolean areEqual(Object left, Object right) { return Objects.equals(left, right); }
 * };
 * </pre>
 * This is just one example of a case where a custom IHasher can be useful for performance reasons; there are also cases
 * where an IHasher is needed to enforce hashing by identity or by value, which affect program logic. Note that the
 * given IHasher is likely to be sub-optimal for many situations with Integer keys, and you may want to try a few
 * different approaches if you know OrderedMap is a bottleneck in your application. If the IHasher is a performance
 * problem, it will be at its worst if the OrderedMap needs to resize, and thus rehash, many times; this won't happen if
 * the capacity is set correctly when the OrderedMap is created (with the capacity equal to or greater than the maximum
 * number of entries that will be added).
 * <br>
 * Thank you, Sebastiano Vigna, for making FastUtil available to the public with such high quality.
 * <br>
 * See https://github.com/vigna/fastutil for the original library.
 * @author Sebastiano Vigna (responsible for all the hard parts)
 * @author Tommy Ettinger (mostly responsible for squashing several layers of parent classes into one monster class)
 */
public class OrderedMap<K, V> implements SortedMap<K, V>, java.io.Serializable, Cloneable {
    private static final long serialVersionUID = 0L;
    /**
     * The array of keys.
     */
    protected K[] key;
    /**
     * The array of values.
     */
    protected V[] value;
    /**
     * The mask for wrapping a position counter.
     */
    protected int mask;
    /**
     * Whether this set contains the key zero.
     */
    protected boolean containsNullKey;
    /**
     * An IntVLA (variable-length int sequence) that stores the positions in the key array of specific keys, with the
     * positions in insertion order. The order can be changed with {@link #reorder(int...)} and other methods.
     */
    protected IntVLA order;
    /**
     * The current table size.
     */
    protected int n;
    /**
     * Threshold after which we rehash. It must be the table size times {@link #f}.
     */
    protected int maxFill;
    /**
     * Number of entries in the set (including the key zero, if present).
     */
    protected int size;
    /**
     * The acceptable load factor.
     */
    public final float f;
    /**
     * Cached set of entries.
     */
    protected volatile MapEntrySet entries;
    /**
     * Cached set of keys.
     */
    protected volatile KeySet keys;
    /**
     * Cached collection of values.
     */
    protected volatile Collection<V> values;
    /**
     * Default return value.
     */
    protected V defRetValue = null;

    /**
     * The initial default size of a hash table.
     */
    public static final int DEFAULT_INITIAL_SIZE = 16;
    /**
     * The default load factor of a hash table.
     */
    public static final float DEFAULT_LOAD_FACTOR = .75f; // .1875f; // .75f;
    /**
     * The load factor for a (usually small) table that is meant to be particularly fast.
     */
    public static final float FAST_LOAD_FACTOR = .5f;
    /**
     * The load factor for a (usually very small) table that is meant to be extremely fast.
     */
    public static final float VERY_FAST_LOAD_FACTOR = .25f;

    protected CrossHash.IHasher hasher = null;

    public void defaultReturnValue(final V rv) {
        defRetValue = rv;
    }

    public V defaultReturnValue() {
        return defRetValue;
    }

    /**
     * Creates a new OrderedMap.
     * <p>
     * <p>The actual table size will be the least power of two greater than <code>expected</code>/<code>f</code>.
     *
     * @param expected the expected number of elements in the hash set.
     * @param f        the load factor.
     */

    @SuppressWarnings("unchecked")
    public OrderedMap(final int expected, final float f) {
        if (f <= 0 || f > 1)
            throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
        if (expected < 0) throw new IllegalArgumentException("The expected number of elements must be nonnegative");
        this.f = f;
        n = arraySize(expected, f);
        mask = n - 1;
        maxFill = maxFill(n, f);
        key = (K[]) new Object[n + 1];
        value = (V[]) new Object[n + 1];
        //link = new long[n + 1];
        order = new IntVLA(expected);
        hasher = CrossHash.defaultHasher;
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor.
     *
     * @param expected the expected number of elements in the OrderedMap.
     */
    public OrderedMap(final int expected) {
        this(expected, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new OrderedMap with initial expected 16 entries and 0.75f as load factor.
     */
    public OrderedMap() {
        this(DEFAULT_INITIAL_SIZE, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new OrderedMap copying a given one.
     *
     * @param m a {@link Map} to be copied into the new OrderedMap.
     * @param f the load factor.
     */
    public OrderedMap(final Map<? extends K, ? extends V> m, final float f) {
        this(m.size(), f, (m instanceof OrderedMap) ? ((OrderedMap) m).hasher : CrossHash.defaultHasher);
        putAll(m);
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor copying a given one.
     *
     * @param m a {@link Map} to be copied into the new OrderedMap.
     */
    public OrderedMap(final Map<? extends K, ? extends V> m) {
        this(m, (m instanceof OrderedMap) ? ((OrderedMap) m).f : DEFAULT_LOAD_FACTOR, (m instanceof OrderedMap) ? ((OrderedMap) m).hasher : CrossHash.defaultHasher);
    }

    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final K[] keyArray, final V[] valueArray, final float f) {
        this(keyArray.length, f);
        if (keyArray.length != valueArray.length)
            throw new IllegalArgumentException("The key array and the value array have different lengths (" + keyArray.length + " and " + valueArray.length + ")");
        for (int i = 0; i < keyArray.length; i++)
            put(keyArray[i], valueArray[i]);
    }
    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyColl the collection of keys of the new OrderedMap.
     * @param valueColl the collection of corresponding values in the new OrderedMap.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final Collection<K> keyColl, final Collection<V> valueColl) {
        this(keyColl, valueColl, DEFAULT_LOAD_FACTOR);
    }
    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyColl the collection of keys of the new OrderedMap.
     * @param valueColl the collection of corresponding values in the new OrderedMap.
     * @param f the load factor.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final Collection<K> keyColl, final Collection<V> valueColl, final float f) {
        this(keyColl.size(), f);
        if (keyColl.size() != valueColl.size())
            throw new IllegalArgumentException("The key array and the value array have different lengths (" + keyColl.size() + " and " + valueColl.size() + ")");
        Iterator<K> ki = keyColl.iterator();
        Iterator<V> vi = valueColl.iterator();
        while (ki.hasNext() && vi.hasNext())
        {
            put(ki.next(), vi.next());
        }
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final K[] keyArray, final V[] valueArray) {
        this(keyArray, valueArray, DEFAULT_LOAD_FACTOR);
    }

    /**
     * Creates a new OrderedMap.
     * <p>
     * <p>The actual table size will be the least power of two greater than <code>expected</code>/<code>f</code>.
     *
     * @param expected the expected number of elements in the hash set.
     * @param f        the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */

    @SuppressWarnings("unchecked")
    public OrderedMap(final int expected, final float f, CrossHash.IHasher hasher) {
        if (f <= 0 || f > 1)
            throw new IllegalArgumentException("Load factor must be greater than 0 and smaller than or equal to 1");
        if (expected < 0) throw new IllegalArgumentException("The expected number of elements must be nonnegative");
        this.f = f;
        n = arraySize(expected, f);
        mask = n - 1;
        maxFill = maxFill(n, f);
        key = (K[]) new Object[n + 1];
        value = (V[]) new Object[n + 1];
        //link = new long[n + 1];
        order = new IntVLA(expected);
        this.hasher = (hasher == null) ? CrossHash.defaultHasher : hasher;
    }
    /**
     * Creates a new OrderedMap with 0.75f as load factor.
     *
     * @param expected the expected number of elements in the OrderedMap.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public OrderedMap(final int expected, CrossHash.IHasher hasher) {
        this(expected, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new OrderedMap with initial expected 16 entries and 0.75f as load factor.
     */
    public OrderedMap(CrossHash.IHasher hasher) {
        this(DEFAULT_INITIAL_SIZE, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new OrderedMap copying a given one.
     *
     * @param m a {@link Map} to be copied into the new OrderedMap.
     * @param f the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public OrderedMap(final Map<? extends K, ? extends V> m, final float f, CrossHash.IHasher hasher) {
        this(m.size(), f, hasher);
        putAll(m);
    }

    /**
     * Creates a new OrderedMap with 0.75f as load factor copying a given one.
     * @param m a {@link Map} to be copied into the new OrderedMap.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     */
    public OrderedMap(final Map<? extends K, ? extends V> m, CrossHash.IHasher hasher) {
        this(m, DEFAULT_LOAD_FACTOR, hasher);
    }

    /**
     * Creates a new OrderedMap using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @param f the load factor.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final K[] keyArray, final V[] valueArray, final float f, CrossHash.IHasher hasher) {
        this(keyArray.length, f, hasher);
        if (keyArray.length != valueArray.length)
            throw new IllegalArgumentException("The key array and the value array have different lengths (" + keyArray.length + " and " + valueArray.length + ")");
        for (int i = 0; i < keyArray.length; i++)
            put(keyArray[i], valueArray[i]);
    }
    /**
     * Creates a new OrderedMap with 0.75f as load factor using the elements of two parallel arrays.
     *
     * @param keyArray the array of keys of the new OrderedMap.
     * @param valueArray the array of corresponding values in the new OrderedMap.
     * @param hasher used to hash items; typically only needed when K is an array, where CrossHash has implementations
     * @throws IllegalArgumentException if <code>k</code> and <code>v</code> have different lengths.
     */
    public OrderedMap(final K[] keyArray, final V[] valueArray, CrossHash.IHasher hasher) {
        this(keyArray, valueArray, DEFAULT_LOAD_FACTOR, hasher);
    }

    private int realSize() {
        return containsNullKey ? size - 1 : size;
    }
    private void ensureCapacity(final int capacity) {
        final int needed = arraySize(capacity, f);
        if (needed > n)
            rehash(needed);
    }
    private void tryCapacity(final long capacity) {
        final int needed = (int) Math.min(
                1 << 30,
                Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(capacity
                        / f))));
        if (needed > n)
            rehash(needed);
    }
    private V removeEntry(final int pos) {
        final V oldValue = value[pos];
        value[pos] = null;
        size--;
        fixOrder(pos);
        shiftKeys(pos);
        if (size < maxFill / 4 && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return oldValue;
    }
    private V removeNullEntry() {
        containsNullKey = false;
        key[n] = null;
        final V oldValue = value[n];
        value[n] = null;
        size--;
        fixOrder(n);
        if (size < maxFill / 4 && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return oldValue;
    }

    /**
     * Puts the first key in keyArray with the first value in valueArray, then the second in each and so on.
     * The entries are all appended to the end of the iteration order, unless a key was already present. Then,
     * its value is changed at the existing position in the iteration order.
     * If the lengths of the two arrays are not equal, this puts a number of entries equal to the lesser length.
     * If either array is null, this returns without performing any changes.
     * @param keyArray an array of K keys that should usually have the same length as valueArray
     * @param valueArray an array of V values that should usually have the same length as keyArray
     */
    public void putAll(final K[] keyArray, final V[] valueArray)
    {
        if(keyArray == null || valueArray == null)
            return;
        for (int i = 0; i < keyArray.length && i < valueArray.length; i++)
            put(keyArray[i], valueArray[i]);

    }

    /**
     * Puts all key-value pairs in the Map m into this OrderedMap.
     * The entries are all appended to the end of the iteration order, unless a key was already present. Then,
     * its value is changed at the existing position in the iteration order. This can take any kind of Map,
     * including unordered HashMap objects; if the Map does not have stable ordering, the order in which entries
     * will be appended is not stable either. For this reason, OrderedMap, LinkedHashMap, and TreeMap (or other
     * SortedMap implementations) will work best when order matters.
     * @param m a Map that should have the same or compatible K key and V value types; OrderedMap and TreeMap work best
     */
    public void putAll(Map<? extends K, ? extends V> m) {
        if (f <= .5)
            ensureCapacity(m.size()); // The resulting map will be sized for
            // m.size() elements
        else
            tryCapacity(size() + m.size()); // The resulting map will be
        int n = m.size();
        final Iterator<? extends Map.Entry<? extends K, ? extends V>> i = m
                .entrySet().iterator();
        if (m instanceof OrderedMap) {
            Entry<? extends K, ? extends V> e;
            while (n-- != 0) {
                e = i.next();
                put(e.getKey(), e.getValue());
            }
        } else {
            Map.Entry<? extends K, ? extends V> e;
            while (n-- != 0) {
                e = i.next();
                put(e.getKey(), e.getValue());
            }
        }
    }
    private int insert(final K k, final V v) {
        int pos;
        if (k == null) {
            if (containsNullKey)
                return n;
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) != null) {
                if (hasher.areEqual(curr, k))
                    return pos;
                while ((curr = key[pos = (pos + 1) & mask]) != null)
                    if (hasher.areEqual(curr, k))
                        return pos;
            }
        }
        key[pos] = k;
        value[pos] = v;
        order.add(pos);
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return -1;
    }
    private int insertAt(final K k, final V v, final int idx) {
        int pos;
        if (k == null) {
            if (containsNullKey)
            {
                fixOrder(n);
                order.insert(idx, n);
                return n;
            }
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) != null) {
                if (hasher.areEqual(curr, k))
                {
                    fixOrder(pos);
                    order.insert(idx, pos);
                    return pos;
                }
                while ((curr = key[pos = (pos + 1) & mask]) != null)
                    if (hasher.areEqual(curr, k))
                    {
                        fixOrder(pos);
                        order.insert(idx, pos);
                        return pos;
                    }
            }
        }
        key[pos] = k;
        value[pos] = v;
        order.insert(idx, pos);
        if (size++ >= maxFill)
            rehash(arraySize(size + 1, f));
        return -1;
    }
    public V put(final K k, final V v) {
        final int pos = insert(k, v);
        if (pos < 0)
            return defRetValue;
        final V oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    public V putAt(final K k, final V v, final int idx) {
        final int pos = insertAt(k, v, idx);
        if (pos < 0)
            return defRetValue;
        final V oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    /**
     * Shifts left entries with the specified hash code, starting at the
     * specified position, and empties the resulting free entry.
     *
     * @param pos
     *            a starting position.
     */
    protected final void shiftKeys(int pos) {
        // Shift entries with the same hash.
        int last, slot;
        K curr;
        final K[] key = this.key;
        for (;;) {
            pos = ((last = pos) + 1) & mask;
            for (;;) {
                if ((curr = key[pos]) == null) {
                    key[last] = null;
                    value[last] = null;
                    return;
                }
                slot = (hasher.hash(curr))
                        & mask;
                if (last <= pos ? last >= slot || slot > pos : last >= slot
                        && slot > pos)
                    break;
                pos = (pos + 1) & mask;
            }
            key[last] = curr;
            value[last] = value[pos];
            fixOrder(pos, last);
        }
    }
    @SuppressWarnings("unchecked")
    public V remove(final Object k) {
        if (k == null) {
            if (containsNullKey)
                return removeNullEntry();
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr))
            return removeEntry(pos);
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr))
                return removeEntry(pos);
        }
    }
    private V setValue(final int pos, final V v) {
        final V oldValue = value[pos];
        value[pos] = v;
        return oldValue;
    }
    /**
     * Removes the mapping associated with the first key in iteration order.
     *
     * @return the value previously associated with the first key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public V removeFirst() {
        if (size == 0)
            throw new NoSuchElementException();
        final int pos = order.removeIndex(0);

        size--;
        final V v = value[pos];
        if (pos == n) {
            containsNullKey = false;
            key[n] = null;
            value[n] = null;
        } else
            shiftKeys(pos);
        if (size < maxFill / 4 && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return v;
    }
    /**
     * Removes the mapping associated with the last key in iteration order.
     *
     * @return the value previously associated with the last key in iteration
     *         order.
     * @throws NoSuchElementException
     *             is this map is empty.
     */
    public V removeLast() {
        if (size == 0)
            throw new NoSuchElementException();
        final int pos = order.items[order.size-1];
        order.pop();
        size--;
        final V v = value[pos];
        if (pos == n) {
            containsNullKey = false;
            key[n] = null;
            value[n] = null;
        } else
            shiftKeys(pos);
        if (size < maxFill / 4 && n > DEFAULT_INITIAL_SIZE)
            rehash(n / 2);
        return v;
    }
    private void moveIndexToFirst(final int i) {
        if(size <= 1 || order.items[0] == i)
            return;
        order.moveToFirst(i);
    }
    private void moveIndexToLast(final int i) {
        if(size <= 1 || order.items[order.size-1] == i)
            return;
        order.moveToLast(i);
    }
    /**
     * Returns the value to which the given key is mapped; if the key is
     * present, it is moved to the first position of the iteration order.
     *
     * @param k
     *            the key.
     * @return the corresponding value, or the
     *         {@linkplain #defaultReturnValue() default return value} if no
     *         value was present for the given key.
     */
    public V getAndMoveToFirst(final K k) {
        if (k == null) {
            if (containsNullKey) {
                moveIndexToFirst(n);
                return value[n];
            }
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr)) {
            moveIndexToFirst(pos);
            return value[pos];
        }
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr)) {
                moveIndexToFirst(pos);
                return value[pos];
            }
        }
    }
    /**
     * Returns the value to which the given key is mapped; if the key is
     * present, it is moved to the last position of the iteration order.
     *
     * @param k the key.
     * @return the corresponding value, or the
     *         {@linkplain #defaultReturnValue() default return value} if no
     *         value was present for the given key.
     */
    public V getAndMoveToLast(final K k) {
        if (k == null) {
            if (containsNullKey) {
                moveIndexToLast(n);
                return value[n];
            }
            return defRetValue;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr)) {
            moveIndexToLast(pos);
            return value[pos];
        }
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr)) {
                moveIndexToLast(pos);
                return value[pos];
            }
        }
    }
    /**
     * Adds a pair to the map; if the key is already present, it is moved to the
     * first position of the iteration order.
     *
     * @param k
     *            the key.
     * @param v
     *            the value.
     * @return the old value, or the {@linkplain #defaultReturnValue() default
     *         return value} if no value was present for the given key.
     */
    public V putAndMoveToFirst(final K k, final V v) {
        int pos;
        if (k == null) {
            if (containsNullKey) {
                moveIndexToFirst(n);
                return setValue(n, v);
            }
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if (!((curr = key[pos = (hasher.hash(k)) & mask]) == null)) {
                if (hasher.areEqual(curr, k)) {
                    moveIndexToFirst(pos);
                    return setValue(pos, v);
                }
                while (!((curr = key[pos = (pos + 1) & mask]) == null))
                    if (hasher.areEqual(curr, k)) {
                        moveIndexToFirst(pos);
                        return setValue(pos, v);
                    }
            }
        }
        key[pos] = k;
        value[pos] = v;
        order.insert(0, pos);
        if (size++ >= maxFill)
            rehash(arraySize(size, f));
        return defRetValue;
    }
    /**
     * Adds a pair to the map; if the key is already present, it is moved to the
     * last position of the iteration order.
     *
     * @param k
     *            the key.
     * @param v
     *            the value.
     * @return the old value, or the {@linkplain #defaultReturnValue() default
     *         return value} if no value was present for the given key.
     */
    public V putAndMoveToLast(final K k, final V v) {
        int pos;
        if (k == null) {
            if (containsNullKey) {
                moveIndexToLast(n);
                return setValue(n, v);
            }
            containsNullKey = true;
            pos = n;
        } else {
            K curr;
            final K[] key = this.key;
            // The starting point.
            if (!((curr = key[pos = (hasher.hash(k)) & mask]) == null)) {
                if (hasher.areEqual(curr, k)) {
                    moveIndexToLast(pos);
                    return setValue(pos, v);
                }
                while (!((curr = key[pos = (pos + 1) & mask]) == null))
                    if (hasher.areEqual(curr, k)) {
                        moveIndexToLast(pos);
                        return setValue(pos, v);
                    }
            }
        }
        key[pos] = k;
        value[pos] = v;
        if(order.peek() != pos)
            order.add(pos);
        if (size++ >= maxFill)
            rehash(arraySize(size, f));
        return defRetValue;
    }
    public V get(final Object k) {
        if (k == null)
            return containsNullKey ? value[n] : defRetValue;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(k, curr))
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(k, curr))
                return value[pos];
        }
    }


    public V getOrDefault(final Object k, final V defaultValue) {
        if (k == null)
            return containsNullKey ? value[n] : defaultValue;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return defaultValue;
        if (hasher.areEqual(k, curr))
            return value[pos];
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defaultValue;
            if (hasher.areEqual(k, curr))
                return value[pos];
        }
    }

    protected int positionOf(final Object k) {
        if (k == null)
        {
            if(containsNullKey)
                return n;
            else
                return -1;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return -1;
        if (hasher.areEqual(k, curr))
            return pos;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = pos + 1 & mask]) == null)
                return -1;
            if (hasher.areEqual(k, curr))
                return pos;
        }
    }

    /**
     * Gets the position in the ordering of the given key, though not as efficiently as some data structures can do it
     * (e.g. {@link Arrangement} can access ordering position very quickly but doesn't store other values on its own).
     * Returns a value that is at least 0 if it found k, or -1 if k was not present.
     * @param k a key or possible key that this should find the index of
     * @return the index of k, if present, or -1 if it is not present in this OrderedMap
     */
    public int indexOf(final Object k)
    {
        int pos = positionOf(k);
        return (pos < 0) ? -1 : order.indexOf(pos);
    }

    /**
     * Swaps the positions in the ordering for the given items, if they are both present. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right was not
     * present, or because left and right are the same reference (so swapping would do nothing)).
     * @param left an item that should be present in this OrderedMap
     * @param right an item that should be present in this OrderedMap
     * @return true if this OrderedMap changed in ordering as a result of this call, or false otherwise
     */
    public boolean swap(final K left, final K right)
    {
        if(left == right) return false;
        int l = indexOf(left);
        if(l < 0) return false;
        int r = indexOf(right);
        if(r < 0) return false;
        order.swap(l, r);
        return true;
    }
    /**
     * Swaps the given indices in the ordering, if they are both valid int indices. Returns true if the ordering
     * changed as a result of this call, or false if it stayed the same (which can be because left or right referred to
     * an out-of-bounds index, or because left and right are equal (so swapping would do nothing)).
     * @param left an index of an item in this OrderedMap, at least 0 and less than {@link #size()}
     * @param right an index of an item in this OrderedMap, at least 0 and less than {@link #size()}
     * @return true if this OrderedMap changed in ordering as a result of this call, or false otherwise
     */
    public boolean swapIndices(final int left, final int right)
    {
        if(left < 0 || right < 0 || left >= order.size || right >= order.size || left == right) return false;
        order.swap(left, right);
        return true;
    }


    public boolean containsKey(final Object k) {
        if (k == null)
            return containsNullKey;
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
            return false;
        if (hasher.areEqual(k, curr))
            return true;
        // There's always an unused entry.
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return false;
            if (hasher.areEqual(k, curr))
                return true;
        }
    }
    public boolean containsValue(final Object v) {
        final V[] value = this.value;
        final K[] key = this.key;
        if (containsNullKey
                && (value[n] == null ? v == null : value[n].equals(v)))
            return true;
        for (int i = n; i-- != 0;)
            if (key[i] != null
                    && (value[i] == null ? v == null : value[i].equals(v)))
                return true;
        return false;
    }
    /*
     * Removes all elements from this map.
     *
     * <P>To increase object reuse, this method does not change the table size.
     * If you want to reduce the table size, you must use {@link #trim()}.
     */
    public void clear() {
        if (size == 0)
            return;
        size = 0;
        containsNullKey = false;
        Arrays.fill(key, null);
        Arrays.fill(value, null);
        order.clear();
    }

    public int size() {
        return size;
    }

    public boolean isEmpty() {
        return size == 0;
    }

    /**
     * The entry class for a OrderedMap does not record key and value, but rather the position in the hash table of the corresponding entry. This is necessary so that calls to
     * {@link Entry#setValue(Object)} are reflected in the map
     */
    final class MapEntry
            implements
            Entry<K, V> {
        // The table index this entry refers to, or -1 if this entry has been
        // deleted.
        int index;
        MapEntry(final int index) {
            this.index = index;
        }
        MapEntry() {
        }
        public K getKey() {
            return key[index];
        }
        public V getValue() {
            return value[index];
        }
        public V setValue(final V v) {
            final V oldValue = value[index];
            value[index] = v;
            return oldValue;
        }
        @SuppressWarnings("unchecked")
        public boolean equals(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            Map.Entry<K, V> e = (Map.Entry<K, V>) o;
            return (key[index] == null
                    ? e.getKey() == null
                    : hasher.areEqual(key[index], e.getKey()))
                    && (value[index] == null
                    ? e.getValue() == null
                    : value[index].equals(e.getValue()));
        }
        public int hashCode() {
            return hasher.hash(key[index])
                    ^ (value[index] == null ? 0 : value[index].hashCode());
        }
        @Override
        public String toString() {
            return (key[index] == OrderedMap.this ? "(this collection)" : String.valueOf(key[index]))
                    + "=>"
                    + (value[index] == OrderedMap.this ? "(this collection)" : String.valueOf(value[index]));
        }
    }

    /**
     * Modifies the ordering so that the given entry is removed. This method will complete in linear time.
     *
     * @param i the index of an entry.
     * @return the iteration-order index of the removed entry
     */
    protected int fixOrder(final int i) {
        if (size == 0) {
            order.clear();
            return -1;
        }
        return order.removeValue(i);
    }

    /**
     * Modifies the ordering for a shift from s to d.
     * <br>
     * This method will complete in linear time unless the source position is first or last.
     *
     * @param s the source position.
     * @param d the destination position.
     */
    protected void fixOrder(int s, int d) {
        if(size == 0)
            return;
        if (size == 1 || order.items[0] == s) {
            order.set(0, d);
        }
        else if (order.items[order.size-1] == s) {
            order.set(order.size - 1, d);
        }
        else
        {
            order.set(order.indexOf(s), d);
        }
    }

    /**
     * Returns the first key of this map in iteration order.
     *
     * @return the first key in iteration order.
     */
    public K firstKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[0]];
    }
    /**
     * Returns the last key of this map in iteration order.
     *
     * @return the last key in iteration order.
     */
    public K lastKey() {
        if (size == 0)
            throw new NoSuchElementException();
        return key[order.items[order.size-1]];
    }
    public Comparator<? super K> comparator() {
        return null;
    }
    public SortedMap<K, V> tailMap(K from) {
        throw new UnsupportedOperationException();
    }
    public SortedMap<K, V> headMap(K to) {
        throw new UnsupportedOperationException();
    }
    public SortedMap<K, V> subMap(K from, K to) {
        throw new UnsupportedOperationException();
    }
    /**
     * A list iterator over a OrderedMap.
     *
     * <P>
     * This class provides a list iterator over a OrderedMap. The
     * constructor runs in constant time.
     */
    private class MapIterator {
        /**
         * The entry that will be returned by the next call to
         * {@link java.util.ListIterator#previous()} (or <code>null</code> if no
         * previous entry exists).
         */
        int prev = -1;
        /**
         * The entry that will be returned by the next call to
         * {@link java.util.ListIterator#next()} (or <code>null</code> if no
         * next entry exists).
         */
        int next = -1;
        /**
         * The last entry that was returned (or -1 if we did not iterate or used
         * {@link java.util.Iterator#remove()}).
         */
        int curr = -1;
        /**
         * The current index (in the sense of a {@link java.util.ListIterator}).
         * Note that this value is not meaningful when this iterator has been
         * created using the nonempty constructor.
         */
        int index = 0;
        private MapIterator() {
            next = size == 0 ? -1 : order.items[0];
            index = 0;
        }
        /*
        private MapIterator(final K from) {
            if (((from) == null)) {
                if (containsNullKey) {
                    next = (int) link[n];
                    prev = n;
                    return;
                } else
                    throw new NoSuchElementException("The key null"
                            + " does not belong to this map.");
            }
            if (((key[last]) != null && (key[last]).equals(from))) {
                prev = last;
                index = size;
                return;
            }
            // The starting point.
            int pos = (((from).hashCode()))
                    & mask;
            // There's always an unused entry.
            while (!((key[pos]) == null)) {
                if (((key[pos]).equals(from))) {
                    // Note: no valid index known.
                    next = (int) link[pos];
                    prev = pos;
                    return;
                }
                pos = (pos + 1) & mask;
            }
            throw new NoSuchElementException("The key " + from
                    + " does not belong to this map.");
        }*/
        public boolean hasNext() {
            return next != -1;
        }
        public boolean hasPrevious() {
            return prev != -1;
        }
        private void ensureIndexKnown() {
            if (index >= 0)
                return;
            if (prev == -1) {
                index = 0;
                return;
            }
            if (next == -1) {
                index = size;
                return;
            }
            index = 0;
            /*while (pos != prev) {
                pos = (int) link[pos];
                index++;
            }*/
        }
        public int nextIndex() {
            ensureIndexKnown();
            return index + 1;
        }
        public int previousIndex() {
            ensureIndexKnown();
            return index - 1;
        }
        public int nextEntry() {
            if (!hasNext())
                throw new NoSuchElementException();
            curr = next;
            if(++index >= order.size)
                next = -1;
            else
                next = order.get(index);//(int) link[curr];
            prev = curr;
            return curr;
        }
        public int previousEntry() {
            if (!hasPrevious())
                throw new NoSuchElementException();
            curr = prev;
            if(--index < 1)
                prev = -1;
            else
                prev = order.get(index - 1);
            //prev = (int) (link[curr] >>> 32);
            next = curr;
            return curr;
        }
        public void remove() {
            ensureIndexKnown();
            if (curr == -1)
                throw new IllegalStateException();
            if (curr == prev) {
                /*
                 * If the last operation was a next(), we are removing an entry
                 * that precedes the current index, and thus we must decrement
                 * it.
                 */
                if(--index >= 1)
                    prev = order.get(index - 1); //(int) (link[curr] >>> 32);
                else
                    prev = -1;
            } else {
                if(index < order.size - 1)
                    next = order.get(index + 1);
                else
                    next = -1;
            }
            order.removeIndex(index);
            size--;
            int last, slot, pos = curr;
            curr = -1;
            if (pos == n) {
                containsNullKey = false;
                key[n] = null;
                value[n] = null;
            } else {
                K curr;
                final K[] key = OrderedMap.this.key;
                // We have to horribly duplicate the shiftKeys() code because we
                // need to update next/prev.
                for (;;) {
                    pos = ((last = pos) + 1) & mask;
                    for (;;) {
                        if ((curr = key[pos]) == null) {
                            key[last] = null;
                            value[last] = null;
                            return;
                        }
                        slot = (hasher.hash(curr)) & mask;
                        if (last <= pos
                                ? last >= slot || slot > pos
                                : last >= slot && slot > pos)
                            break;
                        pos = (pos + 1) & mask;
                    }
                    key[last] = curr;
                    value[last] = value[pos];
                    if (next == pos)
                        next = last;
                    if (prev == pos)
                        prev = last;
                    fixOrder(pos, last);
                }
            }
        }
        public int skip(final int n) {
            int i = n;
            while (i-- != 0 && hasNext())
                nextEntry();
            return n - i - 1;
        }
        public int back(final int n) {
            int i = n;
            while (i-- != 0 && hasPrevious())
                previousEntry();
            return n - i - 1;
        }
    }
    private class EntryIterator extends MapIterator
            implements
            Iterator<Entry<K, V>>, Serializable {
        private static final long serialVersionUID = 0L;

        private MapEntry entry;
        public EntryIterator() {
        }
        public MapEntry next() {
            return entry = new MapEntry(nextEntry());
        }
        public MapEntry previous() {
            return entry = new MapEntry(previousEntry());
        }
        @Override
        public void remove() {
            super.remove();
            entry.index = -1; // You cannot use a deleted entry.
        }
        public void set(Entry<K, V> ok) {
            throw new UnsupportedOperationException();
        }
        public void add(Entry<K, V> ok) {
            throw new UnsupportedOperationException();
        }
    }

    public class FastEntryIterator extends MapIterator implements ListIterator<MapEntry>, Serializable {
        private static final long serialVersionUID = 0L;

        final MapEntry entry = new MapEntry();

        public FastEntryIterator() {
        }
        public MapEntry next() {
            entry.index = nextEntry();
            return entry;
        }
        public MapEntry previous() {
            entry.index = previousEntry();
            return entry;
        }
        public void set(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
        public void add(MapEntry ok) {
            throw new UnsupportedOperationException();
        }
    }
    public final class MapEntrySet
            implements Cloneable, SortedSet<Entry<K, V>>, Set<Entry<K, V>>, Collection<Entry<K, V>>, Serializable {
        private static final long serialVersionUID = 0L;
        public EntryIterator iterator() {
            return new EntryIterator();
        }
        public Comparator<? super Entry<K, V>> comparator() {
            return null;
        }
        public SortedSet<Entry<K, V>> subSet(
                Entry<K, V> fromElement,
                Entry<K, V> toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<Entry<K, V>> headSet(
                Entry<K, V> toElement) {
            throw new UnsupportedOperationException();
        }
        public SortedSet<Entry<K, V>> tailSet(
                Entry<K, V> fromElement) {
            throw new UnsupportedOperationException();
        }
        public Entry<K, V> first() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[0]);
        }
        public Entry<K, V> last() {
            if (size == 0)
                throw new NoSuchElementException();
            return new MapEntry(order.items[order.size-1]);
        }
        @SuppressWarnings("unchecked")
        public boolean contains(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;
            final K k = (K) e.getKey();
            final V v = (V) e.getValue();
            if (k == null)
                return containsNullKey
                        && (value[n] == null ? v == null : value[n]
                        .equals(v));
            K curr;
            final K[] key = OrderedMap.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
                return false;
            if (hasher.areEqual(k, curr))
                return value[pos] == null ? v == null : value[pos]
                        .equals(v);
            // There's always an unused entry.
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == null)
                    return false;
                if (hasher.areEqual(k, curr))
                    return value[pos] == null ? v == null : value[pos]
                            .equals(v);
            }
        }
        @SuppressWarnings("unchecked")
        public boolean remove(final Object o) {
            if (!(o instanceof Map.Entry))
                return false;
            final Map.Entry<?, ?> e = (Map.Entry<?, ?>) o;
            final K k = (K) e.getKey();
            final V v = (V) e.getValue();
            if (k == null) {
                if (containsNullKey
                        && (value[n] == null ? v == null : value[n]
                        .equals(v))) {
                    removeNullEntry();
                    return true;
                }
                return false;
            }
            K curr;
            final K[] key = OrderedMap.this.key;
            int pos;
            // The starting point.
            if ((curr = key[pos = (hasher.hash(k)) & mask]) == null)
                return false;
            if (hasher.areEqual(curr, k)) {
                if (value[pos] == null ? v == null : value[pos]
                        .equals(v)) {
                    removeEntry(pos);
                    return true;
                }
                return false;
            }
            while (true) {
                if ((curr = key[pos = (pos + 1) & mask]) == null)
                    return false;
                if (hasher.areEqual(curr, k)) {
                    if (value[pos] == null ? v == null : value[pos]
                            .equals(v)) {
                        removeEntry(pos);
                        return true;
                    }
                }
            }
        }
        public int size() {
            return size;
        }
        public void clear() {
            OrderedMap.this.clear();
        }

        public FastEntryIterator fastIterator() {
            return new FastEntryIterator();
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            return s.size() == size() && containsAll(s);
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        @SuppressWarnings("unchecked")
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Unsupported.
         *
         * @param c ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean addAll(Collection<? extends Entry<K, V>> c) {
            throw new UnsupportedOperationException("addAll not supported");
        }

        /**
         * Unsupported.
         *
         * @param k ignored
         * @return nothing, throws UnsupportedOperationException
         * @throws UnsupportedOperationException always
         */
        public boolean add(Entry<K, V> k) {
            throw new UnsupportedOperationException("add not supported");
        }

        /**
         * Checks whether this collection contains all elements from the given
         * collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection contains all elements of the
         * argument.
         */
        public boolean containsAll(Collection<?> c) {
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (!contains(i.next()))
                    return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean retainAll(Collection<?> c) {
            boolean retVal = false;
            int n = size();
            final Iterator<?> i = iterator();
            while (n-- != 0) {
                if (!c.contains(i.next())) {
                    i.remove();
                    retVal = true;
                }
            }
            return retVal;
        }

        /**
         * Remove from this collection all elements in the given collection. If the
         * collection is an instance of this class, it uses faster iterators.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the
         * call.
         */
        public boolean removeAll(Collection<?> c) {
            boolean retVal = false;
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (remove(i.next()))
                    retVal = true;
            return retVal;
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            final EntryIterator i = iterator();
            int n = size();
            MapEntry k;
            boolean first = true;
            s.append("{");
            while (n-- != 0) {
                if (first)
                    first = false;
                else
                    s.append(", ");
                k = i.next();
                s.append(key[k.index] == OrderedMap.this ? "(this collection)" : String.valueOf(key[k.index]))
                        .append("=>")
                        .append(value[k.index] == OrderedMap.this ? "(this collection)" : String.valueOf(value[k.index]));
            }
            s.append("}");
            return s.toString();
        }

    }

    @Override
    public SortedSet<Entry<K, V>> entrySet() {
        if (entries == null) entries = new MapEntrySet();
        return entries;
    }
    public MapEntrySet mapEntrySet() {
        if (entries == null) entries = new MapEntrySet();
        return entries;
    }

    /**
     * An iterator on keys.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return keys
     * instead of entries.
     */
    public final class KeyIterator extends MapIterator implements Iterator<K>, Serializable {
        private static final long serialVersionUID = 0L;
        public K previous() {
            return key[previousEntry()];
        }
        public void set(K k) {
            throw new UnsupportedOperationException();
        }
        public void add(K k) {
            throw new UnsupportedOperationException();
        }
        public KeyIterator() {}
        public K next() {
            return key[nextEntry()];
        }
        public void remove() { super.remove(); }
    }

    public final class KeySet implements SortedSet<K>, Serializable {
        private static final long serialVersionUID = 0L;

        public KeyIterator iterator() {
            return new KeyIterator();
        }

        public int size() {
            return size;
        }

        public void clear() {
            OrderedMap.this.clear();
        }

        public K first() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[0]];
        }

        public K last() {
            if (size == 0) throw new NoSuchElementException();
            return key[order.items[order.size-1]];
        }

        public Comparator<K> comparator() {
            return null;
        }

        public final SortedSet<K> tailSet(K from) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<K> headSet(K to) {
            throw new UnsupportedOperationException();
        }

        public final SortedSet<K> subSet(K from, K to) {
            throw new UnsupportedOperationException();
        }

        @SuppressWarnings("unchecked")
        @Override
        public <T> T[] toArray(T[] a) {
            if (a == null || a.length < size()) a = (T[]) new Object[size()];
            unwrap(iterator(), a);
            return a;
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean remove(Object ok) {
            throw new UnsupportedOperationException("Cannot remove from the key set directly");
        }

        /**
         * Always throws an UnsupportedOperationException
         */
        public boolean add(final K o) {
            throw new UnsupportedOperationException("Cannot add to the key set directly");
        }

        /**
         * Delegates to the corresponding type-specific method.
         */
        public boolean contains(final Object o) {
            return containsKey(o);
        }

        /**
         * Checks whether this collection contains all elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection contains all elements of the argument.
         */
        public boolean containsAll(Collection<?> c) {
            final Iterator<?> i = c.iterator();
            int n = c.size();
            while (n-- != 0)
                if (!contains(i.next())) return false;
            return true;
        }

        /**
         * Retains in this collection only elements from the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean retainAll(Collection<?> c) {
            boolean retVal = false;
            int n = size();
            final Iterator<?> i = iterator();
            while (n-- != 0) {
                if (!c.contains(i.next())) {
                    i.remove();
                    retVal = true;
                }
            }
            return retVal;
        }

        /**
         * Remove from this collection all elements in the given type-specific collection.
         *
         * @param c a type-specific collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean removeAll(Collection<?> c) {
            boolean retVal = false;
            int n = c.size();
            final Iterator<?> i = c.iterator();
            while (n-- != 0)
                if (remove(i.next())) retVal = true;
            return retVal;
        }

        public Object[] toArray() {
            final Object[] a = new Object[size()];
            objectUnwrap(iterator(), a);
            return a;
        }

        /**
         * Adds all elements of the given collection to this collection.
         *
         * @param c a collection.
         * @return <code>true</code> if this collection changed as a result of the call.
         */
        public boolean addAll(Collection<? extends K> c) {
            boolean retVal = false;
            final Iterator<? extends K> i = c.iterator();
            int n = c.size();
            while (n-- != 0)
                if (add(i.next())) retVal = true;
            return retVal;
        }

        @Override
        public boolean equals(final Object o) {
            if (o == this)
                return true;
            if (!(o instanceof Set))
                return false;
            Set<?> s = (Set<?>) o;
            if (s.size() != size())
                return false;
            return containsAll(s);
        }
        /**
         * Unwraps an iterator into an array starting at a given offset for a given number of elements.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
         * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
         *
         * @param i      a type-specific iterator.
         * @param array  an array to contain the output of the iterator.
         * @param offset the first element of the array to be returned.
         * @param max    the maximum number of elements to unwrap.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array, int offset, final int max) {
            if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
            if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
            int j = max;
            while (j-- != 0 && i.hasNext())
                array[offset++] = i.next();
            return max - j - 1;
        }

        /**
         * Unwraps an iterator into an array.
         * <p>
         * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
         * of the array has been reached.
         *
         * @param i     a type-specific iterator.
         * @param array an array to contain the output of the iterator.
         * @return the number of elements unwrapped.
         */
        public int unwrap(final KeyIterator i, final Object[] array) {
            return unwrap(i, array, 0, array.length);
        }

        public boolean isEmpty() {
            return size() == 0;
        }

        @Override
        public String toString() {
            final StringBuilder s = new StringBuilder();
            int n = size();
            boolean first = true;
            s.append("{");
            for (int i = 0; i < n; i++) {
                if (first) first = false;
                else s.append(", ");
                K k = keyAt(i);
                s.append(k == OrderedMap.this ? "(this collection)" : String.valueOf(k));
            }
            s.append("}");
            return s.toString();
        }
    }

    public KeySet keySet() {
        if (keys == null) keys = new KeySet();
        return keys;
    }

    public OrderedSet<K> keysAsOrderedSet()
    {
        OrderedSet<K> os = new OrderedSet<>(size, f, hasher);
        for (int i = 0; i < size; i++) {
            os.add(keyAt(i));
        }
        return os;
    }

    /**
     * An iterator on values.
     * <p>
     * <P>We simply override the {@link ListIterator#next()}/{@link ListIterator#previous()} methods (and possibly their type-specific counterparts) so that they return values
     * instead of entries.
     */
    public final class ValueIterator extends MapIterator implements ListIterator<V>, Serializable {
        private static final long serialVersionUID = 0L;

        public V previous() {
            return value[previousEntry()];
        }
        public void set(V v) {
            throw new UnsupportedOperationException();
        }
        public void add(V v) {
            throw new UnsupportedOperationException();
        }
        public ValueIterator() {}
        public V next() {
            return value[nextEntry()];
        }
        public void remove() { super.remove(); }
    }
    public final class ValueCollection extends AbstractCollection<V> implements Serializable
    {
        private static final long serialVersionUID = 0L;
        public ValueIterator iterator() {
            return new ValueIterator();
        }
        public int size() {
            return size;
        }
        public boolean contains(Object v) {
            return containsValue(v);
        }
        public void clear() {
            OrderedMap.this.clear();
        }
    }
    public Collection<V> values() {
        if (values == null) values = new ValueCollection();
        return values;
    }

    public ArrayList<V> valuesAsList()
    {
        ArrayList<V> ls = new ArrayList<>(size);
        for (int i = 0; i < size; i++) {
            ls.add(getAt(i));
        }
        return ls;
    }

    /**
     * Rehashes the map, making the table as small as possible.
     * <p>
     * <P>This method rehashes the table to the smallest size satisfying the load factor. It can be used when the set will not be changed anymore, so to optimize access speed and size.
     * <p>
     * <P>If the table size is already the minimum possible, this method does nothing.
     *
     * @return true if there was enough memory to trim the map.
     * @see #trim(int)
     */
    public boolean trim() {
        final int l = arraySize(size, f);
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes this map if the table is too large.
     * <p>
     * <P>Let <var>N</var> be the smallest table size that can hold <code>max(n,{@link #size()})</code> entries, still satisfying the load factor. If the current table size is smaller than or equal to
     * <var>N</var>, this method does nothing. Otherwise, it rehashes this map in a table of size <var>N</var>.
     * <p>
     * <P>This method is useful when reusing maps. {@linkplain #clear() Clearing a map} leaves the table size untouched. If you are reusing a map many times, you can call this method with a typical
     * size to avoid keeping around a very large table just because of a few large transient maps.
     *
     * @param n the threshold for the trimming.
     * @return true if there was enough memory to trim the map.
     * @see #trim()
     */
    public boolean trim(final int n) {
        final int l = HashCommon.nextPowerOfTwo((int) Math.ceil(n / f));
        if (l >= n || size > maxFill(l, f)) return true;
        try {
            rehash(l);
        } catch (Exception cantDoIt) {
            return false;
        }
        return true;
    }

    /**
     * Rehashes the map.
     *
     * <P>
     * This method implements the basic rehashing strategy, and may be overriden
     * by subclasses implementing different rehashing strategies (e.g.,
     * disk-based rehashing). However, you should not override this method
     * unless you understand the internal workings of this class.
     *
     * @param newN
     *            the new size
     */

    @SuppressWarnings("unchecked")
    protected void rehash(final int newN) {
        final K[] key = this.key;
        final V[] value = this.value;
        final int mask = newN - 1;
        final K[] newKey = (K[]) new Object[newN + 1];
        final V[] newValue = (V[]) new Object[newN + 1];
        final int sz = order.size;
        K k;
        int i, pos;
        final int[] oi = order.items;
        for (int q = 0; q < sz; q++) {
            i = oi[q];
            if ((k = key[i]) == null)
                pos = newN;
            else {
                pos = (hasher.hash(k)) & mask;
                while (newKey[pos] != null)
                    pos = (pos + 1) & mask;
            }
            newKey[pos] = k;
            newValue[pos] = value[i];
            oi[q] = pos;
        }
        n = newN;
        this.mask = mask;
        maxFill = maxFill(n, f);
        this.key = newKey;
        this.value = newValue;
    }
    /*
    @SuppressWarnings("unchecked")
    protected void rehash(final int newN) {
        final K key[] = this.key;
        final V value[] = this.value;
        final int mask = newN - 1; // Note that this is used by the hashing
        // macro
        final K newKey[] = (K[]) new Object[newN + 1];
        final V newValue[] = (V[]) new Object[newN + 1];
        int i = first, prev = -1, newPrev = -1, t, pos;
        final long link[] = this.link;
        final long newLink[] = new long[newN + 1];
        first = -1;
        for (int j = size; j-- != 0;) {
            if (((key[i]) == null))
                pos = newN;
            else {
                pos = (((key[i]).hashCode())) & mask;
                while (!((newKey[pos]) == null))
                    pos = (pos + 1) & mask;
            }
            newKey[pos] = key[i];
            newValue[pos] = value[i];
            if (prev != -1) {
                newLink[newPrev] ^= ((newLink[newPrev] ^ (pos & 0xFFFFFFFFL)) & 0xFFFFFFFFL);
                newLink[pos] ^= ((newLink[pos] ^ ((newPrev & 0xFFFFFFFFL) << 32)) & 0xFFFFFFFF00000000L);
                newPrev = pos;
            } else {
                newPrev = first = pos;
                // Special case of SET(newLink[ pos ], -1, -1);
                newLink[pos] = -1L;
            }
            t = i;
            i = (int) link[i];
            prev = t;
        }
        this.link = newLink;
        this.last = newPrev;
        if (newPrev != -1)
            // Special case of SET_NEXT( newLink[ newPrev ], -1 );
            newLink[newPrev] |= -1 & 0xFFFFFFFFL;
        n = newN;
        this.mask = mask;
        maxFill = maxFill(n, f);
        this.key = newKey;
        this.value = newValue;
    }
    */
    /**
     * Returns a deep copy of this map.
     *
     * <P>
     * This method performs a deep copy of this OrderedMap; the data stored in the
     * map, however, is not cloned. Note that this makes a difference only for
     * object keys.
     *
     * @return a deep copy of this map.
     */
    @SuppressWarnings("unchecked")
    @GwtIncompatible
    public OrderedMap<K, V> clone() {
        OrderedMap<K, V> c;
        try {
            c = (OrderedMap<K, V>) super.clone();
            c.key = (K[]) new Object[n + 1];
            System.arraycopy(key, 0, c.key, 0, n + 1);
            c.value = (V[]) new Object[n + 1];
            System.arraycopy(value, 0, c.value, 0, n + 1);
            c.order = (IntVLA) order.clone();
            c.hasher = hasher;
            return c;
        } catch (Exception cantHappen) {
            throw new UnsupportedOperationException(cantHappen + (cantHappen.getMessage() != null ?
                    "; " + cantHappen.getMessage() : ""));
        }
    }
    /**
     * Returns a hash code for this map.
     *
     * This method overrides the generic method provided by the superclass.
     * Since <code>equals()</code> is not overriden, it is important that the
     * value returned by this method is the same value as the one returned by
     * the overriden method.
     *
     * @return a hash code for this map.
     */
    public int hashCode() {
        int h = 0;
        for (int j = realSize(), i = 0, t = 0; j-- != 0;) {
            while (key[i] == null)
                i++;
            if (this != key[i])
                t = hasher.hash(key[i]);
            if (this != value[i])
                t ^= value[i] == null ? 0 : value[i].hashCode();
            h += t;
            i++;
        }
        // Zero / null keys have hash zero.
        if (containsNullKey)
            h += value[n] == null ? 0 : value[n].hashCode();
        return h;
    }

    public long hash64()
    {
        return 31L * (31L * CrossHash.hash64(key) + CrossHash.hash64(value)) + size;
    }
    /**
     * Returns the maximum number of entries that can be filled before rehashing.
     *
     * @param n the size of the backing array.
     * @param f the load factor.
     * @return the maximum number of entries before rehashing.
     */
    public static int maxFill(final int n, final float f) {
        /* We must guarantee that there is always at least
         * one free entry (even with pathological load factors). */
        return Math.min((int)(n * f + 0.99999994f), n - 1);
    }

    /**
     * Returns the least power of two smaller than or equal to 2<sup>30</sup> and larger than or equal to <code>Math.ceil( expected / f )</code>.
     *
     * @param expected the expected number of elements in a hash table.
     * @param f        the load factor.
     * @return the minimum possible size for a backing array.
     * @throws IllegalArgumentException if the necessary size is larger than 2<sup>30</sup>.
     */
    public static int arraySize(final int expected, final float f) {
        final long s = Math.max(2, HashCommon.nextPowerOfTwo((long) Math.ceil(expected / f)));
        if (s > (1 << 30))
            throw new IllegalArgumentException("Too large (" + expected + " expected elements with load factor " + f + ")");
        return (int) s;
    }

    /**
     * Unwraps an iterator into an array starting at a given offset for a given number of elements.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i      a type-specific iterator.
     * @param array  an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max    the maximum number of elements to unwrap.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array, int offset, final int max) {
        if (max < 0) throw new IllegalArgumentException("The maximum number of elements (" + max + ") is negative");
        if (offset < 0 || offset + max > array.length) throw new IllegalArgumentException();
        int j = max;
        while (j-- != 0 && i.hasNext())
            array[offset++] = i.next();
        return max - j - 1;
    }

    /**
     * Unwraps an iterator into an array.
     * <p>
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i     a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped.
     */
    private int unwrap(final ValueIterator i, final Object[] array) {
        return unwrap(i, array, 0, array.length);
    }


    /** Unwraps an iterator into an array starting at a given offset for a given number of elements.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned, up to a maximum of <code>length</code>, in the given array starting at <code>offset</code>. The
     * number of actually unwrapped elements is returned (it may be less than <code>max</code> if the iterator emits less than <code>max</code> elements).
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @param offset the first element of the array to be returned.
     * @param max the maximum number of elements to unwrap.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array, int offset, final int max ) {
        if ( max < 0 ) throw new IllegalArgumentException( "The maximum number of elements (" + max + ") is negative" );
        if ( offset < 0 || offset + max > array.length ) throw new IllegalArgumentException();
        int j = max;
        while ( j-- != 0 && i.hasNext() )
            array[ offset++ ] = i.next();
        return max - j - 1;
    }

    /** Unwraps an iterator into an array.
     *
     * <P>This method iterates over the given type-specific iterator and stores the elements returned in the given array. The iteration will stop when the iterator has no more elements or when the end
     * of the array has been reached.
     *
     * @param i a type-specific iterator.
     * @param array an array to contain the output of the iterator.
     * @return the number of elements unwrapped. */
    private static <K> int objectUnwrap(final Iterator<? extends K> i, final K[] array) {
        return objectUnwrap(i, array, 0, array.length );
    }

    @Override
    public String toString() {
        final StringBuilder s = new StringBuilder();
        int n = size(), i = 0;
        boolean first = true;
        K k;
        V v;
        s.append("OrderedMap{");
        while (i < n) {
            if (first) first = false;
            else s.append(", ");
            k = keyAt(i);
            v = getAt(i++);
            s.append(k == this ? "(this collection)" : String.valueOf(k))
                    .append("=>")
                    .append(v == this ? "(this collection)" : String.valueOf(v));
        }
        s.append("}");
        return s.toString();
    }
    @Override
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Map))
            return false;
        Map<?, ?> m = (Map<?, ?>) o;
        if (m.size() != size())
            return false;
        return entrySet().containsAll(m.entrySet());
    }

    @GwtIncompatible
    private void writeObject(java.io.ObjectOutputStream s)
            throws java.io.IOException {
        final K[] key = this.key;
        final V[] value = this.value;
        final MapIterator i = new MapIterator();
        s.defaultWriteObject();
        s.writeObject(hasher);
        for (int j = size, e; j-- != 0;) {
            e = i.nextEntry();
            s.writeObject(key[e]);
            s.writeObject(value[e]);
        }
    }
    @GwtIncompatible
    @SuppressWarnings("unchecked")
    private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
        s.defaultReadObject();
        hasher = (CrossHash.IHasher) s.readObject();
        n = arraySize(size, f);
        maxFill = maxFill(n, f);
        mask = n - 1;
        final K[] key = this.key = (K[]) new Object[n + 1];
        final V[] value = this.value = (V[]) new Object[n + 1];
        final IntVLA order = this.order = new IntVLA(n + 1);
        K k;
        V v;
        for (int i = size, pos; i-- != 0;) {
            k = (K) s.readObject();
            v = (V) s.readObject();
            if (k == null) {
                pos = n;
                containsNullKey = true;
            } else {
                pos = (hasher.hash(k))
                        & mask;
                while (!(key[pos] == null))
                    pos = (pos + 1) & mask;
            }

            key[pos] = k;
            value[pos] = v;
            order.add(pos);
        }
    }

    /**
     * Gets the value at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the value to fetch
     * @return the value at the index, if the index is valid, otherwise the default return value
     */
    public V getAt(final int idx) {
        int pos;
        if (idx < 0 || idx >= order.size)
            return defRetValue;
        // The starting point.
        if (key[pos = order.get(idx)] == null)
            return containsNullKey ? value[n] : defRetValue;
        return value[pos];
    }
    /**
     * Gets the key at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the key to fetch
     * @return the key at the index, if the index is valid, otherwise null
     */
    public K keyAt(final int idx) {
        if (idx < 0 || idx >= order.size)
            return null;
        // The starting point.
        return key[order.get(idx)];
    }

    /**
     * Gets the key-value Map.Entry at the given index in the iteration order in constant time (random-access).
     * @param idx the index in the iteration order of the entry to fetch
     * @return the key-value entry at the index, if the index is valid, otherwise null
     */
    public Entry<K, V> entryAt(final int idx)
    {
        if (idx < 0 || idx >= order.size)
            return null;
        return new MapEntry(order.get(idx));
    }

    /**
     * Removes the key and value at the given index in the iteration order in not-exactly constant time (though it still
     * should be efficient).
     * @param idx the index in the iteration order of the key and value to remove
     * @return the value removed, if there was anything removed, or the default return value otherwise (often null)
     */
    public V removeAt(final int idx) {

        if (idx < 0 || idx >= order.size)
            return defRetValue;
        int pos = order.get(idx);
        if (key[pos] == null) {
            if (containsNullKey)
                return removeNullEntry();
            return defRetValue;
        }
        return removeEntry(pos);
    }
    /**
     * Gets a random value from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a value
     * @return a random value from this OrderedMap
     */
    public V randomValue(IRNG rng)
    {
        return getAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random key from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a key
     * @return a random key from this OrderedMap
     */
    public K randomKey(IRNG rng)
    {
        return keyAt(rng.nextInt(order.size));
    }

    /**
     * Gets a random entry from this OrderedMap in constant time, using the given IRNG to generate a random number.
     * @param rng used to generate a random index for a entry
     * @return a random key-value entry from this OrderedMap
     */
    public Entry<K, V> randomEntry(IRNG rng)
    {
        return new MapEntry(order.getRandomElement(rng));
    }

    /**
     * Randomly alters the iteration order for this OrderedMap using the given IRNG to shuffle.
     * @param rng used to generate a random ordering
     * @return this for chaining
     */
    public OrderedMap<K, V> shuffle(IRNG rng)
    {
        if(size < 2)
            return this;
        order.shuffle(rng);
        return this;
    }

    /**
     * Given an array or varargs of replacement indices for this OrderedMap's iteration order, reorders this so the
     * first item in the returned version is the same as {@code getAt(ordering[0])} (with some care taken for negative
     * or too-large indices), the second item in the returned version is the same as {@code getAt(ordering[1])}, etc.
     * <br>
     * Negative indices are considered reversed distances from the end of ordering, so -1 refers to the same index as
     * {@code ordering[ordering.length - 1]}. If ordering is smaller than {@code size()}, only the indices up to the
     * length of ordering will be modified. If ordering is larger than {@code size()}, only as many indices will be
     * affected as {@code size()}, and reversed distances are measured from the end of this Map's entries instead of
     * the end of ordering. Duplicate values in ordering will produce duplicate values in the returned Map.
     * <br>
     * This method modifies this OrderedMap in-place and also returns it for chaining.
     * @param ordering an array or varargs of int indices, where the nth item in ordering changes the nth item in this
     *                 Map to have the value currently in this Map at the index specified by the value in ordering
     * @return this for chaining, after modifying it in-place
     */
    public OrderedMap<K, V> reorder(int... ordering)
    {
        order.reorder(ordering);
        return this;
    }
    private int alterEntry(final int pos) {
        int idx = fixOrder(pos);
        value[pos] = null;
        size--;
        shiftKeys(pos);
        return idx;
    }
    private int alterNullEntry() {
        int idx = fixOrder(n);
        containsNullKey = false;
        value[n] = null;
        size--;
        return idx;
    }
    /**
     * Swaps a key, original, for another key, replacement, while keeping replacement at the same point in the iteration
     * order as original and keeping it associated with the same value (which also keeps its iteration index). Unlike
     * the similar method {@link #alter(Object, Object)}, this will not change this OrderedMap if replacement is already
     * present. To contrast, alter() can reduce the size of the OrderedMap if both original and replacement are already
     * in the Map. If replacement is found, this returns the default return value, otherwise it switches out original
     * for replacement and returns whatever was associated with original.
     * @param original the key to find and swap out
     * @param replacement the key to replace original with
     * @return the value associated with original before, and replacement now
     */
    public V alterCarefully(final K original, final K replacement) {
        if(!containsKey(replacement))
            return alter(original, replacement);
        else
            return defRetValue;
    }
    /**
     * Swaps a key, original, for another key, replacement, while keeping replacement at the same point in the iteration
     * order as original and keeping it associated with the same value (which also keeps its iteration index).
     * Be aware that if both original and replacement are present in the OrderedMap, this will still replace original
     * with replacement but will also remove the other occurrence of replacement to avoid duplicate keys. This can throw
     * off the expected order because the duplicate could be at any point in the ordering when it is removed. You may
     * want to prefer {@link #alterCarefully(Object, Object)} if you don't feel like checking by hand for whether
     * replacement is already present, but using this method is perfectly reasonable if you know overlaps won't happen.
     * @param original the key to find and swap out
     * @param replacement the key to replace original with
     * @return the value associated with original before, and replacement now
     */
    public V alter(final K original, final K replacement) {
        V v;
        int idx;
        if (original == null) {
            if (containsNullKey) {
                v = value[n];
                idx = alterNullEntry();
                putAt(replacement, v, idx);
                return v;
            }
            else
                v = defRetValue;
            return v;
        }
        K curr;
        final K[] key = this.key;
        int pos;
        // The starting point.
        if ((curr = key[pos = (hasher.hash(original)) & mask]) == null)
            return defRetValue;
        if (hasher.areEqual(original, curr))
        {
            v = value[pos];
            idx = alterEntry(pos);
            putAt(replacement, v, idx);
            return v;
        }
        while (true) {
            if ((curr = key[pos = (pos + 1) & mask]) == null)
                return defRetValue;
            if (hasher.areEqual(original, curr))
            {
                v = value[pos];
                idx = alterEntry(pos);
                putAt(replacement, v, idx);
                return v;
            }
        }
    }

    public List<V> getMany(Collection<K> keys)
    {
        if(keys == null)
            return new ArrayList<>(1);
        ArrayList<V> vals = new ArrayList<>(keys.size());
        for(K k : keys)
        {
            vals.add(get(k));
        }
        return vals;
    }
    /**
     * Changes the K at the given index to replacement while keeping replacement at the same point in the ordering.
     * Be aware that if replacement is present in the OrderedMap, this will still replace the given index
     * with replacement but will also remove the other occurrence of replacement to avoid duplicate keys. This can throw
     * off the expected order because the duplicate could be at any point in the ordering when it is removed. You may
     * want to prefer {@link #alterAtCarefully(int, Object)} if you don't feel like checking by hand for whether
     * replacement is already present, but using this method is perfectly reasonable if you know overlaps won't happen.
     * @param index       an index to replace the K key at
     * @param replacement another K key that will replace the original at the remembered index
     * @return the value associated with the possibly-altered key
     */
    public V alterAt(int index, K replacement)
    {
        return alter(keyAt(index), replacement);
    }
    /**
     * Changes the K at the given index to replacement while keeping replacement at the same point in the ordering.
     * Unlike the similar method {@link #alterAt(int, Object)}, this will not change this OrderedMap if replacement is
     * already present. To contrast, alterAt() can reduce the size of the OrderedMap if replacement is already
     * in the Map. If replacement is found, this returns the default return value, otherwise it switches out the index
     * for replacement and returns whatever value was at the index before.
     * @param index       an index to replace the K key at
     * @param replacement another K key that will replace the original at the remembered index
     * @return the value associated with the key at the altered index before, and replacement now
     */
    public V alterAtCarefully(int index, K replacement)
    {
        return alterCarefully(keyAt(index), replacement);
    }

    /**
     * If the specified key is not already associated with a value (or is mapped
     * to {@code null}) associates it with the given value and returns
     * {@code null}, else returns the current value.
     *
     * @param key   key with which the specified value is to be associated
     * @param value value to be associated with the specified key
     * @return the previous value associated with the specified key, or
     * {@code null} if there was no mapping for the key.
     * (A {@code null} return can also indicate that the map
     * previously associated {@code null} with the key.)
     */
    public V putIfAbsent(K key, V value) {
        V v = get(key);
        if(v == null)
            v = put(key, value);
        return v;
    }

    /**
     * Removes the entry for the specified key only if it is currently
     * mapped to the specified value.
     *
     * @param key   key with which the specified value is associated
     * @param value value expected to be associated with the specified key
     * @return {@code true} if the value was removed
     */
    public boolean remove(Object key, Object value) {
        if (containsKey(key) && Objects.equals(get(key), value)) {
            remove(key);
            return true;
        } else
            return false;
    }

    /**
     * Replaces the entry for the specified key only if currently
     * mapped to the specified value. The position in the iteration
     * order is retained.
     *
     * @param key      key with which the specified value is associated
     * @param oldValue value expected to be associated with the specified key
     * @param newValue value to be associated with the specified key
     * @return {@code true} if the value was replaced
     */
    public boolean replace(K key, V oldValue, V newValue) {
        if (containsKey(key)) {
            V v = get(key);
            if (v == oldValue || (oldValue != null && oldValue.equals(v))) {
                put(key, newValue);
                return true;
            }
        }
        return false;
    }

    /**
     * Replaces the entry for the specified key only if it is
     * currently mapped to some value. Preserves the existing key's
     * position in the iteration order.
     *
     * @param key   key with which the specified value is associated
     * @param value value to be associated with the specified key
     * @return the previous value associated with the specified key, or
     * {@code null} if there was no mapping for the key.
     * (A {@code null} return can also indicate that the map
     * previously associated {@code null} with the key.)
     */
    public V replace(K key, V value) {
        if (containsKey(key)) {
            return put(key, value);
        } else
            return null;
    }
    /**
     * Given alternating key and value arguments in pairs, puts each key-value pair into this OrderedMap as if by
     * calling {@link #put(Object, Object)} repeatedly for each pair. This mimics the parameter syntax used for
     * {@link #makeMap(Object, Object, Object...)}, and can be used to retain that style of insertion after an
     * OrderedMap has been instantiated.
     * @param k0 the first key to add
     * @param v0 the first value to add
     * @param rest an array or vararg of keys and values in pairs; should contain alternating K, V, K, V... elements
     * @return this, after adding all viable key-value pairs given
     */
    @SuppressWarnings("unchecked")
    public OrderedMap<K, V> putPairs(K k0, V v0, Object... rest)
    {
        if(rest == null || rest.length == 0)
        {
            put(k0, v0);
            return this;
        }
        put(k0, v0);

        for (int i = 0; i < rest.length - 1; i+=2) {
            try {
                put((K) rest[i], (V) rest[i + 1]);
            }catch (ClassCastException ignored) {
            }
        }
        return this;
    }

    /**
     * Makes an OrderedMap (OM) with the given load factor (which should be between 0.1 and 0.9), key and value types
     * inferred from the types of k0 and v0, and considers all remaining parameters key-value pairs, casting the Objects
     * at positions 0, 2, 4... etc. to K and the objects at positions 1, 3, 5... etc. to V. If rest has an odd-number
     * length, then it discards the last item. If any pair of items in rest cannot be cast to the correct type of K or
     * V, then this inserts nothing for that pair. This is similar to the makeOM method in the Maker class, but does not
     * allow setting the load factor (since that extra parameter can muddle how javac figures out which generic types
     * the map should use), nor does it log debug information if a cast fails. The result should be the same otherwise.
     * <br>
     * This is named makeMap to indicate that it expects key and value parameters, unlike a Set or List. This convention
     * may be extended to other data structures that also have static methods for instantiation.
     * @param k0 the first key; used to infer the types of other keys if generic parameters aren't specified.
     * @param v0 the first value; used to infer the types of other values if generic parameters aren't specified.
     * @param rest an array or vararg of keys and values in pairs; should contain alternating K, V, K, V... elements
     * @param <K> the type of keys in the returned OrderedMap; if not specified, will be inferred from k0
     * @param <V> the type of values in the returned OrderedMap; if not specified, will be inferred from v0
     * @return a freshly-made OrderedMap with K keys and V values, using k0, v0, and the contents of rest to fill it
     */
    @SuppressWarnings("unchecked")
    public static <K, V> OrderedMap<K, V> makeMap(K k0, V v0, Object... rest)
    {
        if(rest == null || rest.length == 0)
        {
            OrderedMap<K, V> om = new OrderedMap<>(2);
            om.put(k0, v0);
            return om;
        }
        OrderedMap<K, V> om = new OrderedMap<>(1 + (rest.length >> 1));
        om.put(k0, v0);

        for (int i = 0; i < rest.length - 1; i+=2) {
            try {
                om.put((K) rest[i], (V) rest[i + 1]);
            }catch (ClassCastException ignored) {
            }
        }
        return om;
    }

    /**
     * Makes an empty OrderedMap (OM); needs key and value types to be specified in order to work. For an empty
     * OrderedMap with String keys and Coord values, you could use {@code Maker.<String, Coord>makeOM()}. Using
     * the new keyword is probably just as easy in this case; this method is provided for completeness relative to
     * makeMap() with 2 or more parameters.
     * @param <K> the type of keys in the returned OrderedMap; cannot be inferred and must be specified
     * @param <V> the type of values in the returned OrderedMap; cannot be inferred and must be specified
     * @return an empty OrderedMap with the given key and value types.
     */
    public static <K, V> OrderedMap<K, V> makeMap()
    {
        return new OrderedMap<>();
    }


    /**
     * Sorts this whole OrderedMap on its keys using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its keys (may need wildcards)
     */
    public void sort(Comparator<? super K> comparator)
    {
        sort(comparator, 0, size);
    }

    /**
     * Sorts a sub-range of this OrderedMap on its keys from what is currently the index {@code start} up to (but not
     * including) the index {@code end}, using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its keys (may need wildcards)
     * @param start the first index of a key to sort (the index can change after this)
     * @param end the exclusive bound on the indices to sort; often this is just {@link #size()}
     */
    public void sort(Comparator<? super K> comparator, int start, int end)
    {
        TimSort.sort(key, order, start, end, comparator);
    }
    /**
     * Sorts this whole OrderedMap on its values using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its values (may need wildcards)
     */
    public void sortByValue(Comparator<? super V> comparator)
    {
        sortByValue(comparator, 0, size);
    }

    /**
     * Sorts a sub-range of this OrderedMap on its values from what is currently the index {@code start} up to (but not
     * including) the index {@code end}, using the supplied Comparator.
     * @param comparator a Comparator that can be used on the same type this uses for its values (may need wildcards)
     * @param start the first index of a value to sort (the index can change after this)
     * @param end the exclusive bound on the indices to sort; often this is just {@link #size()}
     */
    public void sortByValue(Comparator<? super V> comparator, int start, int end)
    {
        TimSort.sort(value, order, start, end, comparator);
    }
}
